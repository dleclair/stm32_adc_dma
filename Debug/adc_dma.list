
adc_dma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004094  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800425c  0800425c  0000525c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800427c  0800427c  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  0800427c  0800427c  0000527c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004284  08004284  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004284  08004284  00005284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004288  08004288  00005288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800428c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c8  2000000c  08004298  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003d4  08004298  000063d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e597  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000207a  00000000  00000000  000145d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d98  00000000  00000000  00016650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ab0  00000000  00000000  000173e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002269b  00000000  00000000  00017e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010386  00000000  00000000  0003a533  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d9d49  00000000  00000000  0004a8b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00124602  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003aa8  00000000  00000000  00124648  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  001280f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08004244 	.word	0x08004244

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08004244 	.word	0x08004244

08000208 <__aeabi_dmul>:
 8000208:	b570      	push	{r4, r5, r6, lr}
 800020a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800020e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000212:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000216:	bf1d      	ittte	ne
 8000218:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800021c:	ea94 0f0c 	teqne	r4, ip
 8000220:	ea95 0f0c 	teqne	r5, ip
 8000224:	f000 f8de 	bleq	80003e4 <__aeabi_dmul+0x1dc>
 8000228:	442c      	add	r4, r5
 800022a:	ea81 0603 	eor.w	r6, r1, r3
 800022e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000232:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000236:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800023a:	bf18      	it	ne
 800023c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000240:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000244:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000248:	d038      	beq.n	80002bc <__aeabi_dmul+0xb4>
 800024a:	fba0 ce02 	umull	ip, lr, r0, r2
 800024e:	f04f 0500 	mov.w	r5, #0
 8000252:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000256:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800025a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800025e:	f04f 0600 	mov.w	r6, #0
 8000262:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000266:	f09c 0f00 	teq	ip, #0
 800026a:	bf18      	it	ne
 800026c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000270:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000274:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000278:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800027c:	d204      	bcs.n	8000288 <__aeabi_dmul+0x80>
 800027e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000282:	416d      	adcs	r5, r5
 8000284:	eb46 0606 	adc.w	r6, r6, r6
 8000288:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800028c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000290:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000294:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000298:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800029c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002a0:	bf88      	it	hi
 80002a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002a6:	d81e      	bhi.n	80002e6 <__aeabi_dmul+0xde>
 80002a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	bd70      	pop	{r4, r5, r6, pc}
 80002bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002c0:	ea46 0101 	orr.w	r1, r6, r1
 80002c4:	ea40 0002 	orr.w	r0, r0, r2
 80002c8:	ea81 0103 	eor.w	r1, r1, r3
 80002cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002d0:	bfc2      	ittt	gt
 80002d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002da:	bd70      	popgt	{r4, r5, r6, pc}
 80002dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002e0:	f04f 0e00 	mov.w	lr, #0
 80002e4:	3c01      	subs	r4, #1
 80002e6:	f300 80ab 	bgt.w	8000440 <__aeabi_dmul+0x238>
 80002ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002ee:	bfde      	ittt	le
 80002f0:	2000      	movle	r0, #0
 80002f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002f6:	bd70      	pople	{r4, r5, r6, pc}
 80002f8:	f1c4 0400 	rsb	r4, r4, #0
 80002fc:	3c20      	subs	r4, #32
 80002fe:	da35      	bge.n	800036c <__aeabi_dmul+0x164>
 8000300:	340c      	adds	r4, #12
 8000302:	dc1b      	bgt.n	800033c <__aeabi_dmul+0x134>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0520 	rsb	r5, r4, #32
 800030c:	fa00 f305 	lsl.w	r3, r0, r5
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f205 	lsl.w	r2, r1, r5
 8000318:	ea40 0002 	orr.w	r0, r0, r2
 800031c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000320:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000324:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000328:	fa21 f604 	lsr.w	r6, r1, r4
 800032c:	eb42 0106 	adc.w	r1, r2, r6
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 040c 	rsb	r4, r4, #12
 8000340:	f1c4 0520 	rsb	r5, r4, #32
 8000344:	fa00 f304 	lsl.w	r3, r0, r4
 8000348:	fa20 f005 	lsr.w	r0, r0, r5
 800034c:	fa01 f204 	lsl.w	r2, r1, r4
 8000350:	ea40 0002 	orr.w	r0, r0, r2
 8000354:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000358:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f1c4 0520 	rsb	r5, r4, #32
 8000370:	fa00 f205 	lsl.w	r2, r0, r5
 8000374:	ea4e 0e02 	orr.w	lr, lr, r2
 8000378:	fa20 f304 	lsr.w	r3, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea43 0302 	orr.w	r3, r3, r2
 8000384:	fa21 f004 	lsr.w	r0, r1, r4
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	fa21 f204 	lsr.w	r2, r1, r4
 8000390:	ea20 0002 	bic.w	r0, r0, r2
 8000394:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f094 0f00 	teq	r4, #0
 80003a8:	d10f      	bne.n	80003ca <__aeabi_dmul+0x1c2>
 80003aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003ae:	0040      	lsls	r0, r0, #1
 80003b0:	eb41 0101 	adc.w	r1, r1, r1
 80003b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003b8:	bf08      	it	eq
 80003ba:	3c01      	subeq	r4, #1
 80003bc:	d0f7      	beq.n	80003ae <__aeabi_dmul+0x1a6>
 80003be:	ea41 0106 	orr.w	r1, r1, r6
 80003c2:	f095 0f00 	teq	r5, #0
 80003c6:	bf18      	it	ne
 80003c8:	4770      	bxne	lr
 80003ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003ce:	0052      	lsls	r2, r2, #1
 80003d0:	eb43 0303 	adc.w	r3, r3, r3
 80003d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003d8:	bf08      	it	eq
 80003da:	3d01      	subeq	r5, #1
 80003dc:	d0f7      	beq.n	80003ce <__aeabi_dmul+0x1c6>
 80003de:	ea43 0306 	orr.w	r3, r3, r6
 80003e2:	4770      	bx	lr
 80003e4:	ea94 0f0c 	teq	r4, ip
 80003e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ec:	bf18      	it	ne
 80003ee:	ea95 0f0c 	teqne	r5, ip
 80003f2:	d00c      	beq.n	800040e <__aeabi_dmul+0x206>
 80003f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f8:	bf18      	it	ne
 80003fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003fe:	d1d1      	bne.n	80003a4 <__aeabi_dmul+0x19c>
 8000400:	ea81 0103 	eor.w	r1, r1, r3
 8000404:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000408:	f04f 0000 	mov.w	r0, #0
 800040c:	bd70      	pop	{r4, r5, r6, pc}
 800040e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000412:	bf06      	itte	eq
 8000414:	4610      	moveq	r0, r2
 8000416:	4619      	moveq	r1, r3
 8000418:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800041c:	d019      	beq.n	8000452 <__aeabi_dmul+0x24a>
 800041e:	ea94 0f0c 	teq	r4, ip
 8000422:	d102      	bne.n	800042a <__aeabi_dmul+0x222>
 8000424:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000428:	d113      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800042a:	ea95 0f0c 	teq	r5, ip
 800042e:	d105      	bne.n	800043c <__aeabi_dmul+0x234>
 8000430:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000434:	bf1c      	itt	ne
 8000436:	4610      	movne	r0, r2
 8000438:	4619      	movne	r1, r3
 800043a:	d10a      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800043c:	ea81 0103 	eor.w	r1, r1, r3
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000444:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000448:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800044c:	f04f 0000 	mov.w	r0, #0
 8000450:	bd70      	pop	{r4, r5, r6, pc}
 8000452:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000456:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800045a:	bd70      	pop	{r4, r5, r6, pc}

0800045c <__aeabi_drsub>:
 800045c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000460:	e002      	b.n	8000468 <__adddf3>
 8000462:	bf00      	nop

08000464 <__aeabi_dsub>:
 8000464:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000468 <__adddf3>:
 8000468:	b530      	push	{r4, r5, lr}
 800046a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800046e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000472:	ea94 0f05 	teq	r4, r5
 8000476:	bf08      	it	eq
 8000478:	ea90 0f02 	teqeq	r0, r2
 800047c:	bf1f      	itttt	ne
 800047e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000482:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000486:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800048a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048e:	f000 80e2 	beq.w	8000656 <__adddf3+0x1ee>
 8000492:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000496:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800049a:	bfb8      	it	lt
 800049c:	426d      	neglt	r5, r5
 800049e:	dd0c      	ble.n	80004ba <__adddf3+0x52>
 80004a0:	442c      	add	r4, r5
 80004a2:	ea80 0202 	eor.w	r2, r0, r2
 80004a6:	ea81 0303 	eor.w	r3, r1, r3
 80004aa:	ea82 0000 	eor.w	r0, r2, r0
 80004ae:	ea83 0101 	eor.w	r1, r3, r1
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	2d36      	cmp	r5, #54	@ 0x36
 80004bc:	bf88      	it	hi
 80004be:	bd30      	pophi	{r4, r5, pc}
 80004c0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004c8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004d0:	d002      	beq.n	80004d8 <__adddf3+0x70>
 80004d2:	4240      	negs	r0, r0
 80004d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004e4:	d002      	beq.n	80004ec <__adddf3+0x84>
 80004e6:	4252      	negs	r2, r2
 80004e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ec:	ea94 0f05 	teq	r4, r5
 80004f0:	f000 80a7 	beq.w	8000642 <__adddf3+0x1da>
 80004f4:	f1a4 0401 	sub.w	r4, r4, #1
 80004f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004fc:	db0d      	blt.n	800051a <__adddf3+0xb2>
 80004fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000502:	fa22 f205 	lsr.w	r2, r2, r5
 8000506:	1880      	adds	r0, r0, r2
 8000508:	f141 0100 	adc.w	r1, r1, #0
 800050c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000510:	1880      	adds	r0, r0, r2
 8000512:	fa43 f305 	asr.w	r3, r3, r5
 8000516:	4159      	adcs	r1, r3
 8000518:	e00e      	b.n	8000538 <__adddf3+0xd0>
 800051a:	f1a5 0520 	sub.w	r5, r5, #32
 800051e:	f10e 0e20 	add.w	lr, lr, #32
 8000522:	2a01      	cmp	r2, #1
 8000524:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000528:	bf28      	it	cs
 800052a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800052e:	fa43 f305 	asr.w	r3, r3, r5
 8000532:	18c0      	adds	r0, r0, r3
 8000534:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	d507      	bpl.n	800054e <__adddf3+0xe6>
 800053e:	f04f 0e00 	mov.w	lr, #0
 8000542:	f1dc 0c00 	rsbs	ip, ip, #0
 8000546:	eb7e 0000 	sbcs.w	r0, lr, r0
 800054a:	eb6e 0101 	sbc.w	r1, lr, r1
 800054e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000552:	d31b      	bcc.n	800058c <__adddf3+0x124>
 8000554:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000558:	d30c      	bcc.n	8000574 <__adddf3+0x10c>
 800055a:	0849      	lsrs	r1, r1, #1
 800055c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000560:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000564:	f104 0401 	add.w	r4, r4, #1
 8000568:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800056c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000570:	f080 809a 	bcs.w	80006a8 <__adddf3+0x240>
 8000574:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000578:	bf08      	it	eq
 800057a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800057e:	f150 0000 	adcs.w	r0, r0, #0
 8000582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000586:	ea41 0105 	orr.w	r1, r1, r5
 800058a:	bd30      	pop	{r4, r5, pc}
 800058c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000590:	4140      	adcs	r0, r0
 8000592:	eb41 0101 	adc.w	r1, r1, r1
 8000596:	3c01      	subs	r4, #1
 8000598:	bf28      	it	cs
 800059a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800059e:	d2e9      	bcs.n	8000574 <__adddf3+0x10c>
 80005a0:	f091 0f00 	teq	r1, #0
 80005a4:	bf04      	itt	eq
 80005a6:	4601      	moveq	r1, r0
 80005a8:	2000      	moveq	r0, #0
 80005aa:	fab1 f381 	clz	r3, r1
 80005ae:	bf08      	it	eq
 80005b0:	3320      	addeq	r3, #32
 80005b2:	f1a3 030b 	sub.w	r3, r3, #11
 80005b6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ba:	da0c      	bge.n	80005d6 <__adddf3+0x16e>
 80005bc:	320c      	adds	r2, #12
 80005be:	dd08      	ble.n	80005d2 <__adddf3+0x16a>
 80005c0:	f102 0c14 	add.w	ip, r2, #20
 80005c4:	f1c2 020c 	rsb	r2, r2, #12
 80005c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005cc:	fa21 f102 	lsr.w	r1, r1, r2
 80005d0:	e00c      	b.n	80005ec <__adddf3+0x184>
 80005d2:	f102 0214 	add.w	r2, r2, #20
 80005d6:	bfd8      	it	le
 80005d8:	f1c2 0c20 	rsble	ip, r2, #32
 80005dc:	fa01 f102 	lsl.w	r1, r1, r2
 80005e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005e4:	bfdc      	itt	le
 80005e6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ea:	4090      	lslle	r0, r2
 80005ec:	1ae4      	subs	r4, r4, r3
 80005ee:	bfa2      	ittt	ge
 80005f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005f4:	4329      	orrge	r1, r5
 80005f6:	bd30      	popge	{r4, r5, pc}
 80005f8:	ea6f 0404 	mvn.w	r4, r4
 80005fc:	3c1f      	subs	r4, #31
 80005fe:	da1c      	bge.n	800063a <__adddf3+0x1d2>
 8000600:	340c      	adds	r4, #12
 8000602:	dc0e      	bgt.n	8000622 <__adddf3+0x1ba>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0220 	rsb	r2, r4, #32
 800060c:	fa20 f004 	lsr.w	r0, r0, r4
 8000610:	fa01 f302 	lsl.w	r3, r1, r2
 8000614:	ea40 0003 	orr.w	r0, r0, r3
 8000618:	fa21 f304 	lsr.w	r3, r1, r4
 800061c:	ea45 0103 	orr.w	r1, r5, r3
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	f1c4 040c 	rsb	r4, r4, #12
 8000626:	f1c4 0220 	rsb	r2, r4, #32
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 f304 	lsl.w	r3, r1, r4
 8000632:	ea40 0003 	orr.w	r0, r0, r3
 8000636:	4629      	mov	r1, r5
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	fa21 f004 	lsr.w	r0, r1, r4
 800063e:	4629      	mov	r1, r5
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	f094 0f00 	teq	r4, #0
 8000646:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800064a:	bf06      	itte	eq
 800064c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000650:	3401      	addeq	r4, #1
 8000652:	3d01      	subne	r5, #1
 8000654:	e74e      	b.n	80004f4 <__adddf3+0x8c>
 8000656:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800065a:	bf18      	it	ne
 800065c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000660:	d029      	beq.n	80006b6 <__adddf3+0x24e>
 8000662:	ea94 0f05 	teq	r4, r5
 8000666:	bf08      	it	eq
 8000668:	ea90 0f02 	teqeq	r0, r2
 800066c:	d005      	beq.n	800067a <__adddf3+0x212>
 800066e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000672:	bf04      	itt	eq
 8000674:	4619      	moveq	r1, r3
 8000676:	4610      	moveq	r0, r2
 8000678:	bd30      	pop	{r4, r5, pc}
 800067a:	ea91 0f03 	teq	r1, r3
 800067e:	bf1e      	ittt	ne
 8000680:	2100      	movne	r1, #0
 8000682:	2000      	movne	r0, #0
 8000684:	bd30      	popne	{r4, r5, pc}
 8000686:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800068a:	d105      	bne.n	8000698 <__adddf3+0x230>
 800068c:	0040      	lsls	r0, r0, #1
 800068e:	4149      	adcs	r1, r1
 8000690:	bf28      	it	cs
 8000692:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd30      	pop	{r4, r5, pc}
 8000698:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800069c:	bf3c      	itt	cc
 800069e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006a2:	bd30      	popcc	{r4, r5, pc}
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006a8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006ac:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006b0:	f04f 0000 	mov.w	r0, #0
 80006b4:	bd30      	pop	{r4, r5, pc}
 80006b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ba:	bf1a      	itte	ne
 80006bc:	4619      	movne	r1, r3
 80006be:	4610      	movne	r0, r2
 80006c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006c4:	bf1c      	itt	ne
 80006c6:	460b      	movne	r3, r1
 80006c8:	4602      	movne	r2, r0
 80006ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ce:	bf06      	itte	eq
 80006d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006d4:	ea91 0f03 	teqeq	r1, r3
 80006d8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	bf00      	nop

080006e0 <__aeabi_ui2d>:
 80006e0:	f090 0f00 	teq	r0, #0
 80006e4:	bf04      	itt	eq
 80006e6:	2100      	moveq	r1, #0
 80006e8:	4770      	bxeq	lr
 80006ea:	b530      	push	{r4, r5, lr}
 80006ec:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006f0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006f4:	f04f 0500 	mov.w	r5, #0
 80006f8:	f04f 0100 	mov.w	r1, #0
 80006fc:	e750      	b.n	80005a0 <__adddf3+0x138>
 80006fe:	bf00      	nop

08000700 <__aeabi_i2d>:
 8000700:	f090 0f00 	teq	r0, #0
 8000704:	bf04      	itt	eq
 8000706:	2100      	moveq	r1, #0
 8000708:	4770      	bxeq	lr
 800070a:	b530      	push	{r4, r5, lr}
 800070c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000710:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000714:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000718:	bf48      	it	mi
 800071a:	4240      	negmi	r0, r0
 800071c:	f04f 0100 	mov.w	r1, #0
 8000720:	e73e      	b.n	80005a0 <__adddf3+0x138>
 8000722:	bf00      	nop

08000724 <__aeabi_f2d>:
 8000724:	0042      	lsls	r2, r0, #1
 8000726:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800072a:	ea4f 0131 	mov.w	r1, r1, rrx
 800072e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000732:	bf1f      	itttt	ne
 8000734:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000738:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800073c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000740:	4770      	bxne	lr
 8000742:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000746:	bf08      	it	eq
 8000748:	4770      	bxeq	lr
 800074a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800074e:	bf04      	itt	eq
 8000750:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000754:	4770      	bxeq	lr
 8000756:	b530      	push	{r4, r5, lr}
 8000758:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	e71c      	b.n	80005a0 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_ul2d>:
 8000768:	ea50 0201 	orrs.w	r2, r0, r1
 800076c:	bf08      	it	eq
 800076e:	4770      	bxeq	lr
 8000770:	b530      	push	{r4, r5, lr}
 8000772:	f04f 0500 	mov.w	r5, #0
 8000776:	e00a      	b.n	800078e <__aeabi_l2d+0x16>

08000778 <__aeabi_l2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000786:	d502      	bpl.n	800078e <__aeabi_l2d+0x16>
 8000788:	4240      	negs	r0, r0
 800078a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800078e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000792:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000796:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800079a:	f43f aed8 	beq.w	800054e <__adddf3+0xe6>
 800079e:	f04f 0203 	mov.w	r2, #3
 80007a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007a6:	bf18      	it	ne
 80007a8:	3203      	addne	r2, #3
 80007aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ae:	bf18      	it	ne
 80007b0:	3203      	addne	r2, #3
 80007b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007b6:	f1c2 0320 	rsb	r3, r2, #32
 80007ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80007be:	fa20 f002 	lsr.w	r0, r0, r2
 80007c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007c6:	ea40 000e 	orr.w	r0, r0, lr
 80007ca:	fa21 f102 	lsr.w	r1, r1, r2
 80007ce:	4414      	add	r4, r2
 80007d0:	e6bd      	b.n	800054e <__adddf3+0xe6>
 80007d2:	bf00      	nop

080007d4 <__aeabi_d2f>:
 80007d4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007d8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80007dc:	bf24      	itt	cs
 80007de:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80007e2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80007e6:	d90d      	bls.n	8000804 <__aeabi_d2f+0x30>
 80007e8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80007ec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007f0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007f4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80007f8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007fc:	bf08      	it	eq
 80007fe:	f020 0001 	biceq.w	r0, r0, #1
 8000802:	4770      	bx	lr
 8000804:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000808:	d121      	bne.n	800084e <__aeabi_d2f+0x7a>
 800080a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 800080e:	bfbc      	itt	lt
 8000810:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000814:	4770      	bxlt	lr
 8000816:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800081a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800081e:	f1c2 0218 	rsb	r2, r2, #24
 8000822:	f1c2 0c20 	rsb	ip, r2, #32
 8000826:	fa10 f30c 	lsls.w	r3, r0, ip
 800082a:	fa20 f002 	lsr.w	r0, r0, r2
 800082e:	bf18      	it	ne
 8000830:	f040 0001 	orrne.w	r0, r0, #1
 8000834:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000838:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800083c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000840:	ea40 000c 	orr.w	r0, r0, ip
 8000844:	fa23 f302 	lsr.w	r3, r3, r2
 8000848:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800084c:	e7cc      	b.n	80007e8 <__aeabi_d2f+0x14>
 800084e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000852:	d107      	bne.n	8000864 <__aeabi_d2f+0x90>
 8000854:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000858:	bf1e      	ittt	ne
 800085a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800085e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000862:	4770      	bxne	lr
 8000864:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000868:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800086c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop

08000874 <__aeabi_uldivmod>:
 8000874:	b953      	cbnz	r3, 800088c <__aeabi_uldivmod+0x18>
 8000876:	b94a      	cbnz	r2, 800088c <__aeabi_uldivmod+0x18>
 8000878:	2900      	cmp	r1, #0
 800087a:	bf08      	it	eq
 800087c:	2800      	cmpeq	r0, #0
 800087e:	bf1c      	itt	ne
 8000880:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000884:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000888:	f000 b96a 	b.w	8000b60 <__aeabi_idiv0>
 800088c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000890:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000894:	f000 f806 	bl	80008a4 <__udivmoddi4>
 8000898:	f8dd e004 	ldr.w	lr, [sp, #4]
 800089c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008a0:	b004      	add	sp, #16
 80008a2:	4770      	bx	lr

080008a4 <__udivmoddi4>:
 80008a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008a8:	9d08      	ldr	r5, [sp, #32]
 80008aa:	460c      	mov	r4, r1
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d14e      	bne.n	800094e <__udivmoddi4+0xaa>
 80008b0:	4694      	mov	ip, r2
 80008b2:	458c      	cmp	ip, r1
 80008b4:	4686      	mov	lr, r0
 80008b6:	fab2 f282 	clz	r2, r2
 80008ba:	d962      	bls.n	8000982 <__udivmoddi4+0xde>
 80008bc:	b14a      	cbz	r2, 80008d2 <__udivmoddi4+0x2e>
 80008be:	f1c2 0320 	rsb	r3, r2, #32
 80008c2:	4091      	lsls	r1, r2
 80008c4:	fa20 f303 	lsr.w	r3, r0, r3
 80008c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80008cc:	4319      	orrs	r1, r3
 80008ce:	fa00 fe02 	lsl.w	lr, r0, r2
 80008d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008d6:	fa1f f68c 	uxth.w	r6, ip
 80008da:	fbb1 f4f7 	udiv	r4, r1, r7
 80008de:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008e2:	fb07 1114 	mls	r1, r7, r4, r1
 80008e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008ea:	fb04 f106 	mul.w	r1, r4, r6
 80008ee:	4299      	cmp	r1, r3
 80008f0:	d90a      	bls.n	8000908 <__udivmoddi4+0x64>
 80008f2:	eb1c 0303 	adds.w	r3, ip, r3
 80008f6:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80008fa:	f080 8112 	bcs.w	8000b22 <__udivmoddi4+0x27e>
 80008fe:	4299      	cmp	r1, r3
 8000900:	f240 810f 	bls.w	8000b22 <__udivmoddi4+0x27e>
 8000904:	3c02      	subs	r4, #2
 8000906:	4463      	add	r3, ip
 8000908:	1a59      	subs	r1, r3, r1
 800090a:	fa1f f38e 	uxth.w	r3, lr
 800090e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000912:	fb07 1110 	mls	r1, r7, r0, r1
 8000916:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800091a:	fb00 f606 	mul.w	r6, r0, r6
 800091e:	429e      	cmp	r6, r3
 8000920:	d90a      	bls.n	8000938 <__udivmoddi4+0x94>
 8000922:	eb1c 0303 	adds.w	r3, ip, r3
 8000926:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800092a:	f080 80fc 	bcs.w	8000b26 <__udivmoddi4+0x282>
 800092e:	429e      	cmp	r6, r3
 8000930:	f240 80f9 	bls.w	8000b26 <__udivmoddi4+0x282>
 8000934:	4463      	add	r3, ip
 8000936:	3802      	subs	r0, #2
 8000938:	1b9b      	subs	r3, r3, r6
 800093a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800093e:	2100      	movs	r1, #0
 8000940:	b11d      	cbz	r5, 800094a <__udivmoddi4+0xa6>
 8000942:	40d3      	lsrs	r3, r2
 8000944:	2200      	movs	r2, #0
 8000946:	e9c5 3200 	strd	r3, r2, [r5]
 800094a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800094e:	428b      	cmp	r3, r1
 8000950:	d905      	bls.n	800095e <__udivmoddi4+0xba>
 8000952:	b10d      	cbz	r5, 8000958 <__udivmoddi4+0xb4>
 8000954:	e9c5 0100 	strd	r0, r1, [r5]
 8000958:	2100      	movs	r1, #0
 800095a:	4608      	mov	r0, r1
 800095c:	e7f5      	b.n	800094a <__udivmoddi4+0xa6>
 800095e:	fab3 f183 	clz	r1, r3
 8000962:	2900      	cmp	r1, #0
 8000964:	d146      	bne.n	80009f4 <__udivmoddi4+0x150>
 8000966:	42a3      	cmp	r3, r4
 8000968:	d302      	bcc.n	8000970 <__udivmoddi4+0xcc>
 800096a:	4290      	cmp	r0, r2
 800096c:	f0c0 80f0 	bcc.w	8000b50 <__udivmoddi4+0x2ac>
 8000970:	1a86      	subs	r6, r0, r2
 8000972:	eb64 0303 	sbc.w	r3, r4, r3
 8000976:	2001      	movs	r0, #1
 8000978:	2d00      	cmp	r5, #0
 800097a:	d0e6      	beq.n	800094a <__udivmoddi4+0xa6>
 800097c:	e9c5 6300 	strd	r6, r3, [r5]
 8000980:	e7e3      	b.n	800094a <__udivmoddi4+0xa6>
 8000982:	2a00      	cmp	r2, #0
 8000984:	f040 8090 	bne.w	8000aa8 <__udivmoddi4+0x204>
 8000988:	eba1 040c 	sub.w	r4, r1, ip
 800098c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000990:	fa1f f78c 	uxth.w	r7, ip
 8000994:	2101      	movs	r1, #1
 8000996:	fbb4 f6f8 	udiv	r6, r4, r8
 800099a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800099e:	fb08 4416 	mls	r4, r8, r6, r4
 80009a2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009a6:	fb07 f006 	mul.w	r0, r7, r6
 80009aa:	4298      	cmp	r0, r3
 80009ac:	d908      	bls.n	80009c0 <__udivmoddi4+0x11c>
 80009ae:	eb1c 0303 	adds.w	r3, ip, r3
 80009b2:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80009b6:	d202      	bcs.n	80009be <__udivmoddi4+0x11a>
 80009b8:	4298      	cmp	r0, r3
 80009ba:	f200 80cd 	bhi.w	8000b58 <__udivmoddi4+0x2b4>
 80009be:	4626      	mov	r6, r4
 80009c0:	1a1c      	subs	r4, r3, r0
 80009c2:	fa1f f38e 	uxth.w	r3, lr
 80009c6:	fbb4 f0f8 	udiv	r0, r4, r8
 80009ca:	fb08 4410 	mls	r4, r8, r0, r4
 80009ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009d2:	fb00 f707 	mul.w	r7, r0, r7
 80009d6:	429f      	cmp	r7, r3
 80009d8:	d908      	bls.n	80009ec <__udivmoddi4+0x148>
 80009da:	eb1c 0303 	adds.w	r3, ip, r3
 80009de:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80009e2:	d202      	bcs.n	80009ea <__udivmoddi4+0x146>
 80009e4:	429f      	cmp	r7, r3
 80009e6:	f200 80b0 	bhi.w	8000b4a <__udivmoddi4+0x2a6>
 80009ea:	4620      	mov	r0, r4
 80009ec:	1bdb      	subs	r3, r3, r7
 80009ee:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009f2:	e7a5      	b.n	8000940 <__udivmoddi4+0x9c>
 80009f4:	f1c1 0620 	rsb	r6, r1, #32
 80009f8:	408b      	lsls	r3, r1
 80009fa:	fa22 f706 	lsr.w	r7, r2, r6
 80009fe:	431f      	orrs	r7, r3
 8000a00:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a04:	fa04 f301 	lsl.w	r3, r4, r1
 8000a08:	ea43 030c 	orr.w	r3, r3, ip
 8000a0c:	40f4      	lsrs	r4, r6
 8000a0e:	fa00 f801 	lsl.w	r8, r0, r1
 8000a12:	0c38      	lsrs	r0, r7, #16
 8000a14:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a18:	fbb4 fef0 	udiv	lr, r4, r0
 8000a1c:	fa1f fc87 	uxth.w	ip, r7
 8000a20:	fb00 441e 	mls	r4, r0, lr, r4
 8000a24:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a28:	fb0e f90c 	mul.w	r9, lr, ip
 8000a2c:	45a1      	cmp	r9, r4
 8000a2e:	fa02 f201 	lsl.w	r2, r2, r1
 8000a32:	d90a      	bls.n	8000a4a <__udivmoddi4+0x1a6>
 8000a34:	193c      	adds	r4, r7, r4
 8000a36:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000a3a:	f080 8084 	bcs.w	8000b46 <__udivmoddi4+0x2a2>
 8000a3e:	45a1      	cmp	r9, r4
 8000a40:	f240 8081 	bls.w	8000b46 <__udivmoddi4+0x2a2>
 8000a44:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a48:	443c      	add	r4, r7
 8000a4a:	eba4 0409 	sub.w	r4, r4, r9
 8000a4e:	fa1f f983 	uxth.w	r9, r3
 8000a52:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a56:	fb00 4413 	mls	r4, r0, r3, r4
 8000a5a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a5e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a62:	45a4      	cmp	ip, r4
 8000a64:	d907      	bls.n	8000a76 <__udivmoddi4+0x1d2>
 8000a66:	193c      	adds	r4, r7, r4
 8000a68:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000a6c:	d267      	bcs.n	8000b3e <__udivmoddi4+0x29a>
 8000a6e:	45a4      	cmp	ip, r4
 8000a70:	d965      	bls.n	8000b3e <__udivmoddi4+0x29a>
 8000a72:	3b02      	subs	r3, #2
 8000a74:	443c      	add	r4, r7
 8000a76:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a7a:	fba0 9302 	umull	r9, r3, r0, r2
 8000a7e:	eba4 040c 	sub.w	r4, r4, ip
 8000a82:	429c      	cmp	r4, r3
 8000a84:	46ce      	mov	lr, r9
 8000a86:	469c      	mov	ip, r3
 8000a88:	d351      	bcc.n	8000b2e <__udivmoddi4+0x28a>
 8000a8a:	d04e      	beq.n	8000b2a <__udivmoddi4+0x286>
 8000a8c:	b155      	cbz	r5, 8000aa4 <__udivmoddi4+0x200>
 8000a8e:	ebb8 030e 	subs.w	r3, r8, lr
 8000a92:	eb64 040c 	sbc.w	r4, r4, ip
 8000a96:	fa04 f606 	lsl.w	r6, r4, r6
 8000a9a:	40cb      	lsrs	r3, r1
 8000a9c:	431e      	orrs	r6, r3
 8000a9e:	40cc      	lsrs	r4, r1
 8000aa0:	e9c5 6400 	strd	r6, r4, [r5]
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	e750      	b.n	800094a <__udivmoddi4+0xa6>
 8000aa8:	f1c2 0320 	rsb	r3, r2, #32
 8000aac:	fa20 f103 	lsr.w	r1, r0, r3
 8000ab0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ab4:	fa24 f303 	lsr.w	r3, r4, r3
 8000ab8:	4094      	lsls	r4, r2
 8000aba:	430c      	orrs	r4, r1
 8000abc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ac0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ac4:	fa1f f78c 	uxth.w	r7, ip
 8000ac8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000acc:	fb08 3110 	mls	r1, r8, r0, r3
 8000ad0:	0c23      	lsrs	r3, r4, #16
 8000ad2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ad6:	fb00 f107 	mul.w	r1, r0, r7
 8000ada:	4299      	cmp	r1, r3
 8000adc:	d908      	bls.n	8000af0 <__udivmoddi4+0x24c>
 8000ade:	eb1c 0303 	adds.w	r3, ip, r3
 8000ae2:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000ae6:	d22c      	bcs.n	8000b42 <__udivmoddi4+0x29e>
 8000ae8:	4299      	cmp	r1, r3
 8000aea:	d92a      	bls.n	8000b42 <__udivmoddi4+0x29e>
 8000aec:	3802      	subs	r0, #2
 8000aee:	4463      	add	r3, ip
 8000af0:	1a5b      	subs	r3, r3, r1
 8000af2:	b2a4      	uxth	r4, r4
 8000af4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000af8:	fb08 3311 	mls	r3, r8, r1, r3
 8000afc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b00:	fb01 f307 	mul.w	r3, r1, r7
 8000b04:	42a3      	cmp	r3, r4
 8000b06:	d908      	bls.n	8000b1a <__udivmoddi4+0x276>
 8000b08:	eb1c 0404 	adds.w	r4, ip, r4
 8000b0c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000b10:	d213      	bcs.n	8000b3a <__udivmoddi4+0x296>
 8000b12:	42a3      	cmp	r3, r4
 8000b14:	d911      	bls.n	8000b3a <__udivmoddi4+0x296>
 8000b16:	3902      	subs	r1, #2
 8000b18:	4464      	add	r4, ip
 8000b1a:	1ae4      	subs	r4, r4, r3
 8000b1c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b20:	e739      	b.n	8000996 <__udivmoddi4+0xf2>
 8000b22:	4604      	mov	r4, r0
 8000b24:	e6f0      	b.n	8000908 <__udivmoddi4+0x64>
 8000b26:	4608      	mov	r0, r1
 8000b28:	e706      	b.n	8000938 <__udivmoddi4+0x94>
 8000b2a:	45c8      	cmp	r8, r9
 8000b2c:	d2ae      	bcs.n	8000a8c <__udivmoddi4+0x1e8>
 8000b2e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b32:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b36:	3801      	subs	r0, #1
 8000b38:	e7a8      	b.n	8000a8c <__udivmoddi4+0x1e8>
 8000b3a:	4631      	mov	r1, r6
 8000b3c:	e7ed      	b.n	8000b1a <__udivmoddi4+0x276>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	e799      	b.n	8000a76 <__udivmoddi4+0x1d2>
 8000b42:	4630      	mov	r0, r6
 8000b44:	e7d4      	b.n	8000af0 <__udivmoddi4+0x24c>
 8000b46:	46d6      	mov	lr, sl
 8000b48:	e77f      	b.n	8000a4a <__udivmoddi4+0x1a6>
 8000b4a:	4463      	add	r3, ip
 8000b4c:	3802      	subs	r0, #2
 8000b4e:	e74d      	b.n	80009ec <__udivmoddi4+0x148>
 8000b50:	4606      	mov	r6, r0
 8000b52:	4623      	mov	r3, r4
 8000b54:	4608      	mov	r0, r1
 8000b56:	e70f      	b.n	8000978 <__udivmoddi4+0xd4>
 8000b58:	3e02      	subs	r6, #2
 8000b5a:	4463      	add	r3, ip
 8000b5c:	e730      	b.n	80009c0 <__udivmoddi4+0x11c>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_idiv0>:
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b68:	f000 fca2 	bl	80014b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b6c:	f000 f82a 	bl	8000bc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b70:	f000 f9ce 	bl	8000f10 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b74:	f000 f9ac 	bl	8000ed0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000b78:	f000 f980 	bl	8000e7c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000b7c:	f000 f890 	bl	8000ca0 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000b80:	f000 f8e0 	bl	8000d44 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000b84:	f000 f92c 	bl	8000de0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8000b88:	4809      	ldr	r0, [pc, #36]	@ (8000bb0 <main+0x4c>)
 8000b8a:	f002 fd79 	bl	8003680 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);
 8000b8e:	4809      	ldr	r0, [pc, #36]	@ (8000bb4 <main+0x50>)
 8000b90:	f002 fd76 	bl	8003680 <HAL_TIM_Base_Start>
  start_time = __HAL_TIM_GetCounter(&htim2);
 8000b94:	4b06      	ldr	r3, [pc, #24]	@ (8000bb0 <main+0x4c>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b9a:	4a07      	ldr	r2, [pc, #28]	@ (8000bb8 <main+0x54>)
 8000b9c:	6013      	str	r3, [r2, #0]
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_buffer, buffer_size);
 8000b9e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ba2:	4906      	ldr	r1, [pc, #24]	@ (8000bbc <main+0x58>)
 8000ba4:	4806      	ldr	r0, [pc, #24]	@ (8000bc0 <main+0x5c>)
 8000ba6:	f000 fd39 	bl	800161c <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000baa:	bf00      	nop
 8000bac:	e7fd      	b.n	8000baa <main+0x46>
 8000bae:	bf00      	nop
 8000bb0:	200000d0 	.word	0x200000d0
 8000bb4:	20000118 	.word	0x20000118
 8000bb8:	200003ac 	.word	0x200003ac
 8000bbc:	200001ac 	.word	0x200001ac
 8000bc0:	20000028 	.word	0x20000028

08000bc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b094      	sub	sp, #80	@ 0x50
 8000bc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bca:	f107 031c 	add.w	r3, r7, #28
 8000bce:	2234      	movs	r2, #52	@ 0x34
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f003 fb0a 	bl	80041ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bd8:	f107 0308 	add.w	r3, r7, #8
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be8:	2300      	movs	r3, #0
 8000bea:	607b      	str	r3, [r7, #4]
 8000bec:	4b2a      	ldr	r3, [pc, #168]	@ (8000c98 <SystemClock_Config+0xd4>)
 8000bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bf0:	4a29      	ldr	r2, [pc, #164]	@ (8000c98 <SystemClock_Config+0xd4>)
 8000bf2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bf6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bf8:	4b27      	ldr	r3, [pc, #156]	@ (8000c98 <SystemClock_Config+0xd4>)
 8000bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c00:	607b      	str	r3, [r7, #4]
 8000c02:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c04:	2300      	movs	r3, #0
 8000c06:	603b      	str	r3, [r7, #0]
 8000c08:	4b24      	ldr	r3, [pc, #144]	@ (8000c9c <SystemClock_Config+0xd8>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000c10:	4a22      	ldr	r2, [pc, #136]	@ (8000c9c <SystemClock_Config+0xd8>)
 8000c12:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c16:	6013      	str	r3, [r2, #0]
 8000c18:	4b20      	ldr	r3, [pc, #128]	@ (8000c9c <SystemClock_Config+0xd8>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c20:	603b      	str	r3, [r7, #0]
 8000c22:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c24:	2302      	movs	r3, #2
 8000c26:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c2c:	2310      	movs	r3, #16
 8000c2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c30:	2302      	movs	r3, #2
 8000c32:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c34:	2300      	movs	r3, #0
 8000c36:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000c38:	2310      	movs	r3, #16
 8000c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000c3c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000c40:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000c42:	2304      	movs	r3, #4
 8000c44:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c46:	2302      	movs	r3, #2
 8000c48:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c4e:	f107 031c 	add.w	r3, r7, #28
 8000c52:	4618      	mov	r0, r3
 8000c54:	f002 fa26 	bl	80030a4 <HAL_RCC_OscConfig>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000c5e:	f000 fa8f 	bl	8001180 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c62:	230f      	movs	r3, #15
 8000c64:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c66:	2302      	movs	r3, #2
 8000c68:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c6e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c74:	2300      	movs	r3, #0
 8000c76:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c78:	f107 0308 	add.w	r3, r7, #8
 8000c7c:	2102      	movs	r1, #2
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f001 fec6 	bl	8002a10 <HAL_RCC_ClockConfig>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000c8a:	f000 fa79 	bl	8001180 <Error_Handler>
  }
}
 8000c8e:	bf00      	nop
 8000c90:	3750      	adds	r7, #80	@ 0x50
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40023800 	.word	0x40023800
 8000c9c:	40007000 	.word	0x40007000

08000ca0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ca6:	463b      	mov	r3, r7
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000cb2:	4b22      	ldr	r3, [pc, #136]	@ (8000d3c <MX_ADC1_Init+0x9c>)
 8000cb4:	4a22      	ldr	r2, [pc, #136]	@ (8000d40 <MX_ADC1_Init+0xa0>)
 8000cb6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000cb8:	4b20      	ldr	r3, [pc, #128]	@ (8000d3c <MX_ADC1_Init+0x9c>)
 8000cba:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000cbe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000cc0:	4b1e      	ldr	r3, [pc, #120]	@ (8000d3c <MX_ADC1_Init+0x9c>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000cc6:	4b1d      	ldr	r3, [pc, #116]	@ (8000d3c <MX_ADC1_Init+0x9c>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ccc:	4b1b      	ldr	r3, [pc, #108]	@ (8000d3c <MX_ADC1_Init+0x9c>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cd2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d3c <MX_ADC1_Init+0x9c>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000cda:	4b18      	ldr	r3, [pc, #96]	@ (8000d3c <MX_ADC1_Init+0x9c>)
 8000cdc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000ce0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000ce2:	4b16      	ldr	r3, [pc, #88]	@ (8000d3c <MX_ADC1_Init+0x9c>)
 8000ce4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000ce8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cea:	4b14      	ldr	r3, [pc, #80]	@ (8000d3c <MX_ADC1_Init+0x9c>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000cf0:	4b12      	ldr	r3, [pc, #72]	@ (8000d3c <MX_ADC1_Init+0x9c>)
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000cf6:	4b11      	ldr	r3, [pc, #68]	@ (8000d3c <MX_ADC1_Init+0x9c>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cfe:	4b0f      	ldr	r3, [pc, #60]	@ (8000d3c <MX_ADC1_Init+0x9c>)
 8000d00:	2201      	movs	r2, #1
 8000d02:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d04:	480d      	ldr	r0, [pc, #52]	@ (8000d3c <MX_ADC1_Init+0x9c>)
 8000d06:	f000 fc45 	bl	8001594 <HAL_ADC_Init>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000d10:	f000 fa36 	bl	8001180 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000d14:	2300      	movs	r3, #0
 8000d16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d20:	463b      	mov	r3, r7
 8000d22:	4619      	mov	r1, r3
 8000d24:	4805      	ldr	r0, [pc, #20]	@ (8000d3c <MX_ADC1_Init+0x9c>)
 8000d26:	f000 fd93 	bl	8001850 <HAL_ADC_ConfigChannel>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000d30:	f000 fa26 	bl	8001180 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d34:	bf00      	nop
 8000d36:	3710      	adds	r7, #16
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20000028 	.word	0x20000028
 8000d40:	40012000 	.word	0x40012000

08000d44 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d4a:	f107 0308 	add.w	r3, r7, #8
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
 8000d52:	605a      	str	r2, [r3, #4]
 8000d54:	609a      	str	r2, [r3, #8]
 8000d56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d58:	463b      	mov	r3, r7
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d60:	4b1e      	ldr	r3, [pc, #120]	@ (8000ddc <MX_TIM2_Init+0x98>)
 8000d62:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d66:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8000d68:	4b1c      	ldr	r3, [pc, #112]	@ (8000ddc <MX_TIM2_Init+0x98>)
 8000d6a:	f240 3247 	movw	r2, #839	@ 0x347
 8000d6e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d70:	4b1a      	ldr	r3, [pc, #104]	@ (8000ddc <MX_TIM2_Init+0x98>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000d76:	4b19      	ldr	r3, [pc, #100]	@ (8000ddc <MX_TIM2_Init+0x98>)
 8000d78:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d7c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d7e:	4b17      	ldr	r3, [pc, #92]	@ (8000ddc <MX_TIM2_Init+0x98>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d84:	4b15      	ldr	r3, [pc, #84]	@ (8000ddc <MX_TIM2_Init+0x98>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d8a:	4814      	ldr	r0, [pc, #80]	@ (8000ddc <MX_TIM2_Init+0x98>)
 8000d8c:	f002 fc28 	bl	80035e0 <HAL_TIM_Base_Init>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000d96:	f000 f9f3 	bl	8001180 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d9e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000da0:	f107 0308 	add.w	r3, r7, #8
 8000da4:	4619      	mov	r1, r3
 8000da6:	480d      	ldr	r0, [pc, #52]	@ (8000ddc <MX_TIM2_Init+0x98>)
 8000da8:	f002 fcd2 	bl	8003750 <HAL_TIM_ConfigClockSource>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000db2:	f000 f9e5 	bl	8001180 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000db6:	2300      	movs	r3, #0
 8000db8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dbe:	463b      	mov	r3, r7
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4806      	ldr	r0, [pc, #24]	@ (8000ddc <MX_TIM2_Init+0x98>)
 8000dc4:	f002 fed2 	bl	8003b6c <HAL_TIMEx_MasterConfigSynchronization>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000dce:	f000 f9d7 	bl	8001180 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000dd2:	bf00      	nop
 8000dd4:	3718      	adds	r7, #24
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	200000d0 	.word	0x200000d0

08000de0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000de6:	f107 0308 	add.w	r3, r7, #8
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	605a      	str	r2, [r3, #4]
 8000df0:	609a      	str	r2, [r3, #8]
 8000df2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000df4:	463b      	mov	r3, r7
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000dfc:	4b1d      	ldr	r3, [pc, #116]	@ (8000e74 <MX_TIM3_Init+0x94>)
 8000dfe:	4a1e      	ldr	r2, [pc, #120]	@ (8000e78 <MX_TIM3_Init+0x98>)
 8000e00:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 840-1;
 8000e02:	4b1c      	ldr	r3, [pc, #112]	@ (8000e74 <MX_TIM3_Init+0x94>)
 8000e04:	f240 3247 	movw	r2, #839	@ 0x347
 8000e08:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e0a:	4b1a      	ldr	r3, [pc, #104]	@ (8000e74 <MX_TIM3_Init+0x94>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8000e10:	4b18      	ldr	r3, [pc, #96]	@ (8000e74 <MX_TIM3_Init+0x94>)
 8000e12:	2263      	movs	r2, #99	@ 0x63
 8000e14:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e16:	4b17      	ldr	r3, [pc, #92]	@ (8000e74 <MX_TIM3_Init+0x94>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e1c:	4b15      	ldr	r3, [pc, #84]	@ (8000e74 <MX_TIM3_Init+0x94>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e22:	4814      	ldr	r0, [pc, #80]	@ (8000e74 <MX_TIM3_Init+0x94>)
 8000e24:	f002 fbdc 	bl	80035e0 <HAL_TIM_Base_Init>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000e2e:	f000 f9a7 	bl	8001180 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e36:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e38:	f107 0308 	add.w	r3, r7, #8
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	480d      	ldr	r0, [pc, #52]	@ (8000e74 <MX_TIM3_Init+0x94>)
 8000e40:	f002 fc86 	bl	8003750 <HAL_TIM_ConfigClockSource>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000e4a:	f000 f999 	bl	8001180 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000e4e:	2320      	movs	r3, #32
 8000e50:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e52:	2300      	movs	r3, #0
 8000e54:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e56:	463b      	mov	r3, r7
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4806      	ldr	r0, [pc, #24]	@ (8000e74 <MX_TIM3_Init+0x94>)
 8000e5c:	f002 fe86 	bl	8003b6c <HAL_TIMEx_MasterConfigSynchronization>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000e66:	f000 f98b 	bl	8001180 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e6a:	bf00      	nop
 8000e6c:	3718      	adds	r7, #24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	20000118 	.word	0x20000118
 8000e78:	40000400 	.word	0x40000400

08000e7c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e80:	4b11      	ldr	r3, [pc, #68]	@ (8000ec8 <MX_USART2_UART_Init+0x4c>)
 8000e82:	4a12      	ldr	r2, [pc, #72]	@ (8000ecc <MX_USART2_UART_Init+0x50>)
 8000e84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e86:	4b10      	ldr	r3, [pc, #64]	@ (8000ec8 <MX_USART2_UART_Init+0x4c>)
 8000e88:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec8 <MX_USART2_UART_Init+0x4c>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e94:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec8 <MX_USART2_UART_Init+0x4c>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec8 <MX_USART2_UART_Init+0x4c>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ea0:	4b09      	ldr	r3, [pc, #36]	@ (8000ec8 <MX_USART2_UART_Init+0x4c>)
 8000ea2:	220c      	movs	r2, #12
 8000ea4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ea6:	4b08      	ldr	r3, [pc, #32]	@ (8000ec8 <MX_USART2_UART_Init+0x4c>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eac:	4b06      	ldr	r3, [pc, #24]	@ (8000ec8 <MX_USART2_UART_Init+0x4c>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000eb2:	4805      	ldr	r0, [pc, #20]	@ (8000ec8 <MX_USART2_UART_Init+0x4c>)
 8000eb4:	f002 fed6 	bl	8003c64 <HAL_UART_Init>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ebe:	f000 f95f 	bl	8001180 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20000160 	.word	0x20000160
 8000ecc:	40004400 	.word	0x40004400

08000ed0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	607b      	str	r3, [r7, #4]
 8000eda:	4b0c      	ldr	r3, [pc, #48]	@ (8000f0c <MX_DMA_Init+0x3c>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ede:	4a0b      	ldr	r2, [pc, #44]	@ (8000f0c <MX_DMA_Init+0x3c>)
 8000ee0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ee4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ee6:	4b09      	ldr	r3, [pc, #36]	@ (8000f0c <MX_DMA_Init+0x3c>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000eee:	607b      	str	r3, [r7, #4]
 8000ef0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	2038      	movs	r0, #56	@ 0x38
 8000ef8:	f001 f835 	bl	8001f66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000efc:	2038      	movs	r0, #56	@ 0x38
 8000efe:	f001 f84e 	bl	8001f9e <HAL_NVIC_EnableIRQ>

}
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40023800 	.word	0x40023800

08000f10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08a      	sub	sp, #40	@ 0x28
 8000f14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f16:	f107 0314 	add.w	r3, r7, #20
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	605a      	str	r2, [r3, #4]
 8000f20:	609a      	str	r2, [r3, #8]
 8000f22:	60da      	str	r2, [r3, #12]
 8000f24:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	613b      	str	r3, [r7, #16]
 8000f2a:	4b2d      	ldr	r3, [pc, #180]	@ (8000fe0 <MX_GPIO_Init+0xd0>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2e:	4a2c      	ldr	r2, [pc, #176]	@ (8000fe0 <MX_GPIO_Init+0xd0>)
 8000f30:	f043 0304 	orr.w	r3, r3, #4
 8000f34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f36:	4b2a      	ldr	r3, [pc, #168]	@ (8000fe0 <MX_GPIO_Init+0xd0>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3a:	f003 0304 	and.w	r3, r3, #4
 8000f3e:	613b      	str	r3, [r7, #16]
 8000f40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	60fb      	str	r3, [r7, #12]
 8000f46:	4b26      	ldr	r3, [pc, #152]	@ (8000fe0 <MX_GPIO_Init+0xd0>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4a:	4a25      	ldr	r2, [pc, #148]	@ (8000fe0 <MX_GPIO_Init+0xd0>)
 8000f4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f52:	4b23      	ldr	r3, [pc, #140]	@ (8000fe0 <MX_GPIO_Init+0xd0>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60bb      	str	r3, [r7, #8]
 8000f62:	4b1f      	ldr	r3, [pc, #124]	@ (8000fe0 <MX_GPIO_Init+0xd0>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f66:	4a1e      	ldr	r2, [pc, #120]	@ (8000fe0 <MX_GPIO_Init+0xd0>)
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f6e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fe0 <MX_GPIO_Init+0xd0>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	60bb      	str	r3, [r7, #8]
 8000f78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	607b      	str	r3, [r7, #4]
 8000f7e:	4b18      	ldr	r3, [pc, #96]	@ (8000fe0 <MX_GPIO_Init+0xd0>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f82:	4a17      	ldr	r2, [pc, #92]	@ (8000fe0 <MX_GPIO_Init+0xd0>)
 8000f84:	f043 0302 	orr.w	r3, r3, #2
 8000f88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f8a:	4b15      	ldr	r3, [pc, #84]	@ (8000fe0 <MX_GPIO_Init+0xd0>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8e:	f003 0302 	and.w	r3, r3, #2
 8000f92:	607b      	str	r3, [r7, #4]
 8000f94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f96:	2200      	movs	r2, #0
 8000f98:	2120      	movs	r1, #32
 8000f9a:	4812      	ldr	r0, [pc, #72]	@ (8000fe4 <MX_GPIO_Init+0xd4>)
 8000f9c:	f001 fd1e 	bl	80029dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fa0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fa6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000faa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	480c      	ldr	r0, [pc, #48]	@ (8000fe8 <MX_GPIO_Init+0xd8>)
 8000fb8:	f001 fb7c 	bl	80026b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000fbc:	2320      	movs	r3, #32
 8000fbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000fcc:	f107 0314 	add.w	r3, r7, #20
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4804      	ldr	r0, [pc, #16]	@ (8000fe4 <MX_GPIO_Init+0xd4>)
 8000fd4:	f001 fb6e 	bl	80026b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fd8:	bf00      	nop
 8000fda:	3728      	adds	r7, #40	@ 0x28
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	40023800 	.word	0x40023800
 8000fe4:	40020000 	.word	0x40020000
 8000fe8:	40020800 	.word	0x40020800

08000fec <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
	return;
 8000ff4:	bf00      	nop
}
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
	end_time = __HAL_TIM_GetCounter(&htim2);
 8001008:	4b4f      	ldr	r3, [pc, #316]	@ (8001148 <HAL_ADC_ConvCpltCallback+0x148>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800100e:	4a4f      	ldr	r2, [pc, #316]	@ (800114c <HAL_ADC_ConvCpltCallback+0x14c>)
 8001010:	6013      	str	r3, [r2, #0]
	duration = end_time - start_time;
 8001012:	4b4e      	ldr	r3, [pc, #312]	@ (800114c <HAL_ADC_ConvCpltCallback+0x14c>)
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	4b4e      	ldr	r3, [pc, #312]	@ (8001150 <HAL_ADC_ConvCpltCallback+0x150>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	461a      	mov	r2, r3
 800101e:	4b4d      	ldr	r3, [pc, #308]	@ (8001154 <HAL_ADC_ConvCpltCallback+0x154>)
 8001020:	601a      	str	r2, [r3, #0]
	min_sample = adc_buffer[0];
 8001022:	4b4d      	ldr	r3, [pc, #308]	@ (8001158 <HAL_ADC_ConvCpltCallback+0x158>)
 8001024:	881a      	ldrh	r2, [r3, #0]
 8001026:	4b4d      	ldr	r3, [pc, #308]	@ (800115c <HAL_ADC_ConvCpltCallback+0x15c>)
 8001028:	801a      	strh	r2, [r3, #0]
	max_sample = adc_buffer[0];
 800102a:	4b4b      	ldr	r3, [pc, #300]	@ (8001158 <HAL_ADC_ConvCpltCallback+0x158>)
 800102c:	881a      	ldrh	r2, [r3, #0]
 800102e:	4b4c      	ldr	r3, [pc, #304]	@ (8001160 <HAL_ADC_ConvCpltCallback+0x160>)
 8001030:	801a      	strh	r2, [r3, #0]
	sample_sum = 0;
 8001032:	4b4c      	ldr	r3, [pc, #304]	@ (8001164 <HAL_ADC_ConvCpltCallback+0x164>)
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < buffer_size; i++) {
 8001038:	2300      	movs	r3, #0
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	e028      	b.n	8001090 <HAL_ADC_ConvCpltCallback+0x90>
		sample_sum += adc_buffer[i];
 800103e:	4a46      	ldr	r2, [pc, #280]	@ (8001158 <HAL_ADC_ConvCpltCallback+0x158>)
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001046:	461a      	mov	r2, r3
 8001048:	4b46      	ldr	r3, [pc, #280]	@ (8001164 <HAL_ADC_ConvCpltCallback+0x164>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4413      	add	r3, r2
 800104e:	4a45      	ldr	r2, [pc, #276]	@ (8001164 <HAL_ADC_ConvCpltCallback+0x164>)
 8001050:	6013      	str	r3, [r2, #0]
		if (adc_buffer[i] < min_sample) {
 8001052:	4a41      	ldr	r2, [pc, #260]	@ (8001158 <HAL_ADC_ConvCpltCallback+0x158>)
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800105a:	4b40      	ldr	r3, [pc, #256]	@ (800115c <HAL_ADC_ConvCpltCallback+0x15c>)
 800105c:	881b      	ldrh	r3, [r3, #0]
 800105e:	429a      	cmp	r2, r3
 8001060:	d205      	bcs.n	800106e <HAL_ADC_ConvCpltCallback+0x6e>
			min_sample = adc_buffer[i];
 8001062:	4a3d      	ldr	r2, [pc, #244]	@ (8001158 <HAL_ADC_ConvCpltCallback+0x158>)
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800106a:	4b3c      	ldr	r3, [pc, #240]	@ (800115c <HAL_ADC_ConvCpltCallback+0x15c>)
 800106c:	801a      	strh	r2, [r3, #0]
		}
		if (adc_buffer[i] > max_sample) {
 800106e:	4a3a      	ldr	r2, [pc, #232]	@ (8001158 <HAL_ADC_ConvCpltCallback+0x158>)
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001076:	4b3a      	ldr	r3, [pc, #232]	@ (8001160 <HAL_ADC_ConvCpltCallback+0x160>)
 8001078:	881b      	ldrh	r3, [r3, #0]
 800107a:	429a      	cmp	r2, r3
 800107c:	d905      	bls.n	800108a <HAL_ADC_ConvCpltCallback+0x8a>
			max_sample = adc_buffer[i];
 800107e:	4a36      	ldr	r2, [pc, #216]	@ (8001158 <HAL_ADC_ConvCpltCallback+0x158>)
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001086:	4b36      	ldr	r3, [pc, #216]	@ (8001160 <HAL_ADC_ConvCpltCallback+0x160>)
 8001088:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < buffer_size; i++) {
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	3301      	adds	r3, #1
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	2bff      	cmp	r3, #255	@ 0xff
 8001094:	ddd3      	ble.n	800103e <HAL_ADC_ConvCpltCallback+0x3e>
		}
	}
	avg_sample = sample_sum / buffer_size;
 8001096:	4b33      	ldr	r3, [pc, #204]	@ (8001164 <HAL_ADC_ConvCpltCallback+0x164>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	0a1b      	lsrs	r3, r3, #8
 800109c:	4a32      	ldr	r2, [pc, #200]	@ (8001168 <HAL_ADC_ConvCpltCallback+0x168>)
 800109e:	6013      	str	r3, [r2, #0]
	min_voltage = min_sample * sample_scalar;
 80010a0:	4b2e      	ldr	r3, [pc, #184]	@ (800115c <HAL_ADC_ConvCpltCallback+0x15c>)
 80010a2:	881b      	ldrh	r3, [r3, #0]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff fb2b 	bl	8000700 <__aeabi_i2d>
 80010aa:	a325      	add	r3, pc, #148	@ (adr r3, 8001140 <HAL_ADC_ConvCpltCallback+0x140>)
 80010ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b0:	f7ff f8aa 	bl	8000208 <__aeabi_dmul>
 80010b4:	4602      	mov	r2, r0
 80010b6:	460b      	mov	r3, r1
 80010b8:	4610      	mov	r0, r2
 80010ba:	4619      	mov	r1, r3
 80010bc:	f7ff fb8a 	bl	80007d4 <__aeabi_d2f>
 80010c0:	4603      	mov	r3, r0
 80010c2:	4a2a      	ldr	r2, [pc, #168]	@ (800116c <HAL_ADC_ConvCpltCallback+0x16c>)
 80010c4:	6013      	str	r3, [r2, #0]
	max_voltage = max_sample * sample_scalar;
 80010c6:	4b26      	ldr	r3, [pc, #152]	@ (8001160 <HAL_ADC_ConvCpltCallback+0x160>)
 80010c8:	881b      	ldrh	r3, [r3, #0]
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff fb18 	bl	8000700 <__aeabi_i2d>
 80010d0:	a31b      	add	r3, pc, #108	@ (adr r3, 8001140 <HAL_ADC_ConvCpltCallback+0x140>)
 80010d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d6:	f7ff f897 	bl	8000208 <__aeabi_dmul>
 80010da:	4602      	mov	r2, r0
 80010dc:	460b      	mov	r3, r1
 80010de:	4610      	mov	r0, r2
 80010e0:	4619      	mov	r1, r3
 80010e2:	f7ff fb77 	bl	80007d4 <__aeabi_d2f>
 80010e6:	4603      	mov	r3, r0
 80010e8:	4a21      	ldr	r2, [pc, #132]	@ (8001170 <HAL_ADC_ConvCpltCallback+0x170>)
 80010ea:	6013      	str	r3, [r2, #0]
	avg_voltage = avg_sample * sample_scalar;
 80010ec:	4b1e      	ldr	r3, [pc, #120]	@ (8001168 <HAL_ADC_ConvCpltCallback+0x168>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff faf5 	bl	80006e0 <__aeabi_ui2d>
 80010f6:	a312      	add	r3, pc, #72	@ (adr r3, 8001140 <HAL_ADC_ConvCpltCallback+0x140>)
 80010f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010fc:	f7ff f884 	bl	8000208 <__aeabi_dmul>
 8001100:	4602      	mov	r2, r0
 8001102:	460b      	mov	r3, r1
 8001104:	4610      	mov	r0, r2
 8001106:	4619      	mov	r1, r3
 8001108:	f7ff fb64 	bl	80007d4 <__aeabi_d2f>
 800110c:	4603      	mov	r3, r0
 800110e:	4a19      	ldr	r2, [pc, #100]	@ (8001174 <HAL_ADC_ConvCpltCallback+0x174>)
 8001110:	6013      	str	r3, [r2, #0]
	sample_count = sample_count + 1;
 8001112:	4b19      	ldr	r3, [pc, #100]	@ (8001178 <HAL_ADC_ConvCpltCallback+0x178>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	3301      	adds	r3, #1
 8001118:	4a17      	ldr	r2, [pc, #92]	@ (8001178 <HAL_ADC_ConvCpltCallback+0x178>)
 800111a:	6013      	str	r3, [r2, #0]
	start_time = __HAL_TIM_GetCounter(&htim2);
 800111c:	4b0a      	ldr	r3, [pc, #40]	@ (8001148 <HAL_ADC_ConvCpltCallback+0x148>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001122:	4a0b      	ldr	r2, [pc, #44]	@ (8001150 <HAL_ADC_ConvCpltCallback+0x150>)
 8001124:	6013      	str	r3, [r2, #0]
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_buffer, buffer_size);
 8001126:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800112a:	490b      	ldr	r1, [pc, #44]	@ (8001158 <HAL_ADC_ConvCpltCallback+0x158>)
 800112c:	4813      	ldr	r0, [pc, #76]	@ (800117c <HAL_ADC_ConvCpltCallback+0x17c>)
 800112e:	f000 fa75 	bl	800161c <HAL_ADC_Start_DMA>
	return;
 8001132:	bf00      	nop
}
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	f3af 8000 	nop.w
 8001140:	66666666 	.word	0x66666666
 8001144:	3f4a6666 	.word	0x3f4a6666
 8001148:	200000d0 	.word	0x200000d0
 800114c:	200003b0 	.word	0x200003b0
 8001150:	200003ac 	.word	0x200003ac
 8001154:	200003b4 	.word	0x200003b4
 8001158:	200001ac 	.word	0x200001ac
 800115c:	200003b8 	.word	0x200003b8
 8001160:	200003ba 	.word	0x200003ba
 8001164:	200003bc 	.word	0x200003bc
 8001168:	200003c0 	.word	0x200003c0
 800116c:	200003c4 	.word	0x200003c4
 8001170:	200003c8 	.word	0x200003c8
 8001174:	200003cc 	.word	0x200003cc
 8001178:	200001a8 	.word	0x200001a8
 800117c:	20000028 	.word	0x20000028

08001180 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001184:	b672      	cpsid	i
}
 8001186:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001188:	bf00      	nop
 800118a:	e7fd      	b.n	8001188 <Error_Handler+0x8>

0800118c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	607b      	str	r3, [r7, #4]
 8001196:	4b10      	ldr	r3, [pc, #64]	@ (80011d8 <HAL_MspInit+0x4c>)
 8001198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800119a:	4a0f      	ldr	r2, [pc, #60]	@ (80011d8 <HAL_MspInit+0x4c>)
 800119c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80011a2:	4b0d      	ldr	r3, [pc, #52]	@ (80011d8 <HAL_MspInit+0x4c>)
 80011a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011aa:	607b      	str	r3, [r7, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	603b      	str	r3, [r7, #0]
 80011b2:	4b09      	ldr	r3, [pc, #36]	@ (80011d8 <HAL_MspInit+0x4c>)
 80011b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b6:	4a08      	ldr	r2, [pc, #32]	@ (80011d8 <HAL_MspInit+0x4c>)
 80011b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80011be:	4b06      	ldr	r3, [pc, #24]	@ (80011d8 <HAL_MspInit+0x4c>)
 80011c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011c6:	603b      	str	r3, [r7, #0]
 80011c8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80011ca:	2007      	movs	r0, #7
 80011cc:	f000 fec0 	bl	8001f50 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011d0:	bf00      	nop
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40023800 	.word	0x40023800

080011dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08a      	sub	sp, #40	@ 0x28
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e4:	f107 0314 	add.w	r3, r7, #20
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a2e      	ldr	r2, [pc, #184]	@ (80012b4 <HAL_ADC_MspInit+0xd8>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d156      	bne.n	80012ac <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	613b      	str	r3, [r7, #16]
 8001202:	4b2d      	ldr	r3, [pc, #180]	@ (80012b8 <HAL_ADC_MspInit+0xdc>)
 8001204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001206:	4a2c      	ldr	r2, [pc, #176]	@ (80012b8 <HAL_ADC_MspInit+0xdc>)
 8001208:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800120c:	6453      	str	r3, [r2, #68]	@ 0x44
 800120e:	4b2a      	ldr	r3, [pc, #168]	@ (80012b8 <HAL_ADC_MspInit+0xdc>)
 8001210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001212:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001216:	613b      	str	r3, [r7, #16]
 8001218:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	4b26      	ldr	r3, [pc, #152]	@ (80012b8 <HAL_ADC_MspInit+0xdc>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001222:	4a25      	ldr	r2, [pc, #148]	@ (80012b8 <HAL_ADC_MspInit+0xdc>)
 8001224:	f043 0301 	orr.w	r3, r3, #1
 8001228:	6313      	str	r3, [r2, #48]	@ 0x30
 800122a:	4b23      	ldr	r3, [pc, #140]	@ (80012b8 <HAL_ADC_MspInit+0xdc>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001236:	2301      	movs	r3, #1
 8001238:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800123a:	2303      	movs	r3, #3
 800123c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001242:	f107 0314 	add.w	r3, r7, #20
 8001246:	4619      	mov	r1, r3
 8001248:	481c      	ldr	r0, [pc, #112]	@ (80012bc <HAL_ADC_MspInit+0xe0>)
 800124a:	f001 fa33 	bl	80026b4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800124e:	4b1c      	ldr	r3, [pc, #112]	@ (80012c0 <HAL_ADC_MspInit+0xe4>)
 8001250:	4a1c      	ldr	r2, [pc, #112]	@ (80012c4 <HAL_ADC_MspInit+0xe8>)
 8001252:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001254:	4b1a      	ldr	r3, [pc, #104]	@ (80012c0 <HAL_ADC_MspInit+0xe4>)
 8001256:	2200      	movs	r2, #0
 8001258:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800125a:	4b19      	ldr	r3, [pc, #100]	@ (80012c0 <HAL_ADC_MspInit+0xe4>)
 800125c:	2200      	movs	r2, #0
 800125e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001260:	4b17      	ldr	r3, [pc, #92]	@ (80012c0 <HAL_ADC_MspInit+0xe4>)
 8001262:	2200      	movs	r2, #0
 8001264:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001266:	4b16      	ldr	r3, [pc, #88]	@ (80012c0 <HAL_ADC_MspInit+0xe4>)
 8001268:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800126c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800126e:	4b14      	ldr	r3, [pc, #80]	@ (80012c0 <HAL_ADC_MspInit+0xe4>)
 8001270:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001274:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001276:	4b12      	ldr	r3, [pc, #72]	@ (80012c0 <HAL_ADC_MspInit+0xe4>)
 8001278:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800127c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800127e:	4b10      	ldr	r3, [pc, #64]	@ (80012c0 <HAL_ADC_MspInit+0xe4>)
 8001280:	2200      	movs	r2, #0
 8001282:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001284:	4b0e      	ldr	r3, [pc, #56]	@ (80012c0 <HAL_ADC_MspInit+0xe4>)
 8001286:	2200      	movs	r2, #0
 8001288:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800128a:	4b0d      	ldr	r3, [pc, #52]	@ (80012c0 <HAL_ADC_MspInit+0xe4>)
 800128c:	2200      	movs	r2, #0
 800128e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001290:	480b      	ldr	r0, [pc, #44]	@ (80012c0 <HAL_ADC_MspInit+0xe4>)
 8001292:	f000 fe9f 	bl	8001fd4 <HAL_DMA_Init>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 800129c:	f7ff ff70 	bl	8001180 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	4a07      	ldr	r2, [pc, #28]	@ (80012c0 <HAL_ADC_MspInit+0xe4>)
 80012a4:	639a      	str	r2, [r3, #56]	@ 0x38
 80012a6:	4a06      	ldr	r2, [pc, #24]	@ (80012c0 <HAL_ADC_MspInit+0xe4>)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80012ac:	bf00      	nop
 80012ae:	3728      	adds	r7, #40	@ 0x28
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	40012000 	.word	0x40012000
 80012b8:	40023800 	.word	0x40023800
 80012bc:	40020000 	.word	0x40020000
 80012c0:	20000070 	.word	0x20000070
 80012c4:	40026410 	.word	0x40026410

080012c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012d8:	d10e      	bne.n	80012f8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	4b13      	ldr	r3, [pc, #76]	@ (800132c <HAL_TIM_Base_MspInit+0x64>)
 80012e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e2:	4a12      	ldr	r2, [pc, #72]	@ (800132c <HAL_TIM_Base_MspInit+0x64>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80012ea:	4b10      	ldr	r3, [pc, #64]	@ (800132c <HAL_TIM_Base_MspInit+0x64>)
 80012ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80012f6:	e012      	b.n	800131e <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a0c      	ldr	r2, [pc, #48]	@ (8001330 <HAL_TIM_Base_MspInit+0x68>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d10d      	bne.n	800131e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	60bb      	str	r3, [r7, #8]
 8001306:	4b09      	ldr	r3, [pc, #36]	@ (800132c <HAL_TIM_Base_MspInit+0x64>)
 8001308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130a:	4a08      	ldr	r2, [pc, #32]	@ (800132c <HAL_TIM_Base_MspInit+0x64>)
 800130c:	f043 0302 	orr.w	r3, r3, #2
 8001310:	6413      	str	r3, [r2, #64]	@ 0x40
 8001312:	4b06      	ldr	r3, [pc, #24]	@ (800132c <HAL_TIM_Base_MspInit+0x64>)
 8001314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	68bb      	ldr	r3, [r7, #8]
}
 800131e:	bf00      	nop
 8001320:	3714      	adds	r7, #20
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	40023800 	.word	0x40023800
 8001330:	40000400 	.word	0x40000400

08001334 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b08a      	sub	sp, #40	@ 0x28
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133c:	f107 0314 	add.w	r3, r7, #20
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a19      	ldr	r2, [pc, #100]	@ (80013b8 <HAL_UART_MspInit+0x84>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d12b      	bne.n	80013ae <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	613b      	str	r3, [r7, #16]
 800135a:	4b18      	ldr	r3, [pc, #96]	@ (80013bc <HAL_UART_MspInit+0x88>)
 800135c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800135e:	4a17      	ldr	r2, [pc, #92]	@ (80013bc <HAL_UART_MspInit+0x88>)
 8001360:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001364:	6413      	str	r3, [r2, #64]	@ 0x40
 8001366:	4b15      	ldr	r3, [pc, #84]	@ (80013bc <HAL_UART_MspInit+0x88>)
 8001368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800136e:	613b      	str	r3, [r7, #16]
 8001370:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	4b11      	ldr	r3, [pc, #68]	@ (80013bc <HAL_UART_MspInit+0x88>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137a:	4a10      	ldr	r2, [pc, #64]	@ (80013bc <HAL_UART_MspInit+0x88>)
 800137c:	f043 0301 	orr.w	r3, r3, #1
 8001380:	6313      	str	r3, [r2, #48]	@ 0x30
 8001382:	4b0e      	ldr	r3, [pc, #56]	@ (80013bc <HAL_UART_MspInit+0x88>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800138e:	230c      	movs	r3, #12
 8001390:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001392:	2302      	movs	r3, #2
 8001394:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139a:	2303      	movs	r3, #3
 800139c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800139e:	2307      	movs	r3, #7
 80013a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a2:	f107 0314 	add.w	r3, r7, #20
 80013a6:	4619      	mov	r1, r3
 80013a8:	4805      	ldr	r0, [pc, #20]	@ (80013c0 <HAL_UART_MspInit+0x8c>)
 80013aa:	f001 f983 	bl	80026b4 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80013ae:	bf00      	nop
 80013b0:	3728      	adds	r7, #40	@ 0x28
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40004400 	.word	0x40004400
 80013bc:	40023800 	.word	0x40023800
 80013c0:	40020000 	.word	0x40020000

080013c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013c8:	bf00      	nop
 80013ca:	e7fd      	b.n	80013c8 <NMI_Handler+0x4>

080013cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013d0:	bf00      	nop
 80013d2:	e7fd      	b.n	80013d0 <HardFault_Handler+0x4>

080013d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013d8:	bf00      	nop
 80013da:	e7fd      	b.n	80013d8 <MemManage_Handler+0x4>

080013dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013e0:	bf00      	nop
 80013e2:	e7fd      	b.n	80013e0 <BusFault_Handler+0x4>

080013e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013e8:	bf00      	nop
 80013ea:	e7fd      	b.n	80013e8 <UsageFault_Handler+0x4>

080013ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr

080013fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr

08001416 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001416:	b580      	push	{r7, lr}
 8001418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800141a:	f000 f89b 	bl	8001554 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
	...

08001424 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001428:	4802      	ldr	r0, [pc, #8]	@ (8001434 <DMA2_Stream0_IRQHandler+0x10>)
 800142a:	f000 fed9 	bl	80021e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20000070 	.word	0x20000070

08001438 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800143c:	4b06      	ldr	r3, [pc, #24]	@ (8001458 <SystemInit+0x20>)
 800143e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001442:	4a05      	ldr	r2, [pc, #20]	@ (8001458 <SystemInit+0x20>)
 8001444:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001448:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800145c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001494 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001460:	f7ff ffea 	bl	8001438 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001464:	480c      	ldr	r0, [pc, #48]	@ (8001498 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001466:	490d      	ldr	r1, [pc, #52]	@ (800149c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001468:	4a0d      	ldr	r2, [pc, #52]	@ (80014a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800146a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800146c:	e002      	b.n	8001474 <LoopCopyDataInit>

0800146e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800146e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001470:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001472:	3304      	adds	r3, #4

08001474 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001474:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001476:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001478:	d3f9      	bcc.n	800146e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800147a:	4a0a      	ldr	r2, [pc, #40]	@ (80014a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800147c:	4c0a      	ldr	r4, [pc, #40]	@ (80014a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800147e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001480:	e001      	b.n	8001486 <LoopFillZerobss>

08001482 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001482:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001484:	3204      	adds	r2, #4

08001486 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001486:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001488:	d3fb      	bcc.n	8001482 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800148a:	f002 feb7 	bl	80041fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800148e:	f7ff fb69 	bl	8000b64 <main>
  bx  lr    
 8001492:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001494:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001498:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800149c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80014a0:	0800428c 	.word	0x0800428c
  ldr r2, =_sbss
 80014a4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80014a8:	200003d4 	.word	0x200003d4

080014ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014ac:	e7fe      	b.n	80014ac <ADC_IRQHandler>
	...

080014b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014b4:	4b0e      	ldr	r3, [pc, #56]	@ (80014f0 <HAL_Init+0x40>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a0d      	ldr	r2, [pc, #52]	@ (80014f0 <HAL_Init+0x40>)
 80014ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014c0:	4b0b      	ldr	r3, [pc, #44]	@ (80014f0 <HAL_Init+0x40>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a0a      	ldr	r2, [pc, #40]	@ (80014f0 <HAL_Init+0x40>)
 80014c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014cc:	4b08      	ldr	r3, [pc, #32]	@ (80014f0 <HAL_Init+0x40>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a07      	ldr	r2, [pc, #28]	@ (80014f0 <HAL_Init+0x40>)
 80014d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014d8:	2003      	movs	r0, #3
 80014da:	f000 fd39 	bl	8001f50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014de:	2000      	movs	r0, #0
 80014e0:	f000 f808 	bl	80014f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014e4:	f7ff fe52 	bl	800118c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40023c00 	.word	0x40023c00

080014f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014fc:	4b12      	ldr	r3, [pc, #72]	@ (8001548 <HAL_InitTick+0x54>)
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	4b12      	ldr	r3, [pc, #72]	@ (800154c <HAL_InitTick+0x58>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	4619      	mov	r1, r3
 8001506:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800150a:	fbb3 f3f1 	udiv	r3, r3, r1
 800150e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001512:	4618      	mov	r0, r3
 8001514:	f000 fd51 	bl	8001fba <HAL_SYSTICK_Config>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e00e      	b.n	8001540 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2b0f      	cmp	r3, #15
 8001526:	d80a      	bhi.n	800153e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001528:	2200      	movs	r2, #0
 800152a:	6879      	ldr	r1, [r7, #4]
 800152c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001530:	f000 fd19 	bl	8001f66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001534:	4a06      	ldr	r2, [pc, #24]	@ (8001550 <HAL_InitTick+0x5c>)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800153a:	2300      	movs	r3, #0
 800153c:	e000      	b.n	8001540 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
}
 8001540:	4618      	mov	r0, r3
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20000000 	.word	0x20000000
 800154c:	20000008 	.word	0x20000008
 8001550:	20000004 	.word	0x20000004

08001554 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001558:	4b06      	ldr	r3, [pc, #24]	@ (8001574 <HAL_IncTick+0x20>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	461a      	mov	r2, r3
 800155e:	4b06      	ldr	r3, [pc, #24]	@ (8001578 <HAL_IncTick+0x24>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4413      	add	r3, r2
 8001564:	4a04      	ldr	r2, [pc, #16]	@ (8001578 <HAL_IncTick+0x24>)
 8001566:	6013      	str	r3, [r2, #0]
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	20000008 	.word	0x20000008
 8001578:	200003d0 	.word	0x200003d0

0800157c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  return uwTick;
 8001580:	4b03      	ldr	r3, [pc, #12]	@ (8001590 <HAL_GetTick+0x14>)
 8001582:	681b      	ldr	r3, [r3, #0]
}
 8001584:	4618      	mov	r0, r3
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	200003d0 	.word	0x200003d0

08001594 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800159c:	2300      	movs	r3, #0
 800159e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d101      	bne.n	80015aa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e033      	b.n	8001612 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d109      	bne.n	80015c6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f7ff fe12 	bl	80011dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ca:	f003 0310 	and.w	r3, r3, #16
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d118      	bne.n	8001604 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80015da:	f023 0302 	bic.w	r3, r3, #2
 80015de:	f043 0202 	orr.w	r2, r3, #2
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f000 fa64 	bl	8001ab4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f6:	f023 0303 	bic.w	r3, r3, #3
 80015fa:	f043 0201 	orr.w	r2, r3, #1
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	641a      	str	r2, [r3, #64]	@ 0x40
 8001602:	e001      	b.n	8001608 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2200      	movs	r2, #0
 800160c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001610:	7bfb      	ldrb	r3, [r7, #15]
}
 8001612:	4618      	mov	r0, r3
 8001614:	3710      	adds	r7, #16
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
	...

0800161c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b086      	sub	sp, #24
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001628:	2300      	movs	r3, #0
 800162a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001632:	2b01      	cmp	r3, #1
 8001634:	d101      	bne.n	800163a <HAL_ADC_Start_DMA+0x1e>
 8001636:	2302      	movs	r3, #2
 8001638:	e0e9      	b.n	800180e <HAL_ADC_Start_DMA+0x1f2>
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	2201      	movs	r2, #1
 800163e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	f003 0301 	and.w	r3, r3, #1
 800164c:	2b01      	cmp	r3, #1
 800164e:	d018      	beq.n	8001682 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	689a      	ldr	r2, [r3, #8]
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f042 0201 	orr.w	r2, r2, #1
 800165e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001660:	4b6d      	ldr	r3, [pc, #436]	@ (8001818 <HAL_ADC_Start_DMA+0x1fc>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a6d      	ldr	r2, [pc, #436]	@ (800181c <HAL_ADC_Start_DMA+0x200>)
 8001666:	fba2 2303 	umull	r2, r3, r2, r3
 800166a:	0c9a      	lsrs	r2, r3, #18
 800166c:	4613      	mov	r3, r2
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	4413      	add	r3, r2
 8001672:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001674:	e002      	b.n	800167c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	3b01      	subs	r3, #1
 800167a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d1f9      	bne.n	8001676 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800168c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001690:	d107      	bne.n	80016a2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	689a      	ldr	r2, [r3, #8]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80016a0:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	f003 0301 	and.w	r3, r3, #1
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	f040 80a1 	bne.w	80017f4 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b6:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80016ba:	f023 0301 	bic.w	r3, r3, #1
 80016be:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d007      	beq.n	80016e4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80016dc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80016f0:	d106      	bne.n	8001700 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016f6:	f023 0206 	bic.w	r2, r3, #6
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	645a      	str	r2, [r3, #68]	@ 0x44
 80016fe:	e002      	b.n	8001706 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2200      	movs	r2, #0
 8001704:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2200      	movs	r2, #0
 800170a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800170e:	4b44      	ldr	r3, [pc, #272]	@ (8001820 <HAL_ADC_Start_DMA+0x204>)
 8001710:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001716:	4a43      	ldr	r2, [pc, #268]	@ (8001824 <HAL_ADC_Start_DMA+0x208>)
 8001718:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800171e:	4a42      	ldr	r2, [pc, #264]	@ (8001828 <HAL_ADC_Start_DMA+0x20c>)
 8001720:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001726:	4a41      	ldr	r2, [pc, #260]	@ (800182c <HAL_ADC_Start_DMA+0x210>)
 8001728:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001732:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	685a      	ldr	r2, [r3, #4]
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001742:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	689a      	ldr	r2, [r3, #8]
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001752:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	334c      	adds	r3, #76	@ 0x4c
 800175e:	4619      	mov	r1, r3
 8001760:	68ba      	ldr	r2, [r7, #8]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f000 fce4 	bl	8002130 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f003 031f 	and.w	r3, r3, #31
 8001770:	2b00      	cmp	r3, #0
 8001772:	d12a      	bne.n	80017ca <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a2d      	ldr	r2, [pc, #180]	@ (8001830 <HAL_ADC_Start_DMA+0x214>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d015      	beq.n	80017aa <HAL_ADC_Start_DMA+0x18e>
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a2c      	ldr	r2, [pc, #176]	@ (8001834 <HAL_ADC_Start_DMA+0x218>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d105      	bne.n	8001794 <HAL_ADC_Start_DMA+0x178>
 8001788:	4b25      	ldr	r3, [pc, #148]	@ (8001820 <HAL_ADC_Start_DMA+0x204>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f003 031f 	and.w	r3, r3, #31
 8001790:	2b00      	cmp	r3, #0
 8001792:	d00a      	beq.n	80017aa <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a27      	ldr	r2, [pc, #156]	@ (8001838 <HAL_ADC_Start_DMA+0x21c>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d136      	bne.n	800180c <HAL_ADC_Start_DMA+0x1f0>
 800179e:	4b20      	ldr	r3, [pc, #128]	@ (8001820 <HAL_ADC_Start_DMA+0x204>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f003 0310 	and.w	r3, r3, #16
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d130      	bne.n	800180c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d129      	bne.n	800180c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	689a      	ldr	r2, [r3, #8]
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	e020      	b.n	800180c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a18      	ldr	r2, [pc, #96]	@ (8001830 <HAL_ADC_Start_DMA+0x214>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d11b      	bne.n	800180c <HAL_ADC_Start_DMA+0x1f0>
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d114      	bne.n	800180c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	689a      	ldr	r2, [r3, #8]
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80017f0:	609a      	str	r2, [r3, #8]
 80017f2:	e00b      	b.n	800180c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f8:	f043 0210 	orr.w	r2, r3, #16
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001804:	f043 0201 	orr.w	r2, r3, #1
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3718      	adds	r7, #24
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	20000000 	.word	0x20000000
 800181c:	431bde83 	.word	0x431bde83
 8001820:	40012300 	.word	0x40012300
 8001824:	08001cad 	.word	0x08001cad
 8001828:	08001d67 	.word	0x08001d67
 800182c:	08001d83 	.word	0x08001d83
 8001830:	40012000 	.word	0x40012000
 8001834:	40012100 	.word	0x40012100
 8001838:	40012200 	.word	0x40012200

0800183c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800185a:	2300      	movs	r3, #0
 800185c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001864:	2b01      	cmp	r3, #1
 8001866:	d101      	bne.n	800186c <HAL_ADC_ConfigChannel+0x1c>
 8001868:	2302      	movs	r3, #2
 800186a:	e113      	b.n	8001a94 <HAL_ADC_ConfigChannel+0x244>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2201      	movs	r2, #1
 8001870:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2b09      	cmp	r3, #9
 800187a:	d925      	bls.n	80018c8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	68d9      	ldr	r1, [r3, #12]
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	b29b      	uxth	r3, r3
 8001888:	461a      	mov	r2, r3
 800188a:	4613      	mov	r3, r2
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	4413      	add	r3, r2
 8001890:	3b1e      	subs	r3, #30
 8001892:	2207      	movs	r2, #7
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	43da      	mvns	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	400a      	ands	r2, r1
 80018a0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	68d9      	ldr	r1, [r3, #12]
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	689a      	ldr	r2, [r3, #8]
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	4618      	mov	r0, r3
 80018b4:	4603      	mov	r3, r0
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	4403      	add	r3, r0
 80018ba:	3b1e      	subs	r3, #30
 80018bc:	409a      	lsls	r2, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	430a      	orrs	r2, r1
 80018c4:	60da      	str	r2, [r3, #12]
 80018c6:	e022      	b.n	800190e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	6919      	ldr	r1, [r3, #16]
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	461a      	mov	r2, r3
 80018d6:	4613      	mov	r3, r2
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	4413      	add	r3, r2
 80018dc:	2207      	movs	r2, #7
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	43da      	mvns	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	400a      	ands	r2, r1
 80018ea:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	6919      	ldr	r1, [r3, #16]
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	689a      	ldr	r2, [r3, #8]
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	4618      	mov	r0, r3
 80018fe:	4603      	mov	r3, r0
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	4403      	add	r3, r0
 8001904:	409a      	lsls	r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	430a      	orrs	r2, r1
 800190c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	2b06      	cmp	r3, #6
 8001914:	d824      	bhi.n	8001960 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685a      	ldr	r2, [r3, #4]
 8001920:	4613      	mov	r3, r2
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	4413      	add	r3, r2
 8001926:	3b05      	subs	r3, #5
 8001928:	221f      	movs	r2, #31
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	43da      	mvns	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	400a      	ands	r2, r1
 8001936:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	b29b      	uxth	r3, r3
 8001944:	4618      	mov	r0, r3
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685a      	ldr	r2, [r3, #4]
 800194a:	4613      	mov	r3, r2
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	4413      	add	r3, r2
 8001950:	3b05      	subs	r3, #5
 8001952:	fa00 f203 	lsl.w	r2, r0, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	430a      	orrs	r2, r1
 800195c:	635a      	str	r2, [r3, #52]	@ 0x34
 800195e:	e04c      	b.n	80019fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	2b0c      	cmp	r3, #12
 8001966:	d824      	bhi.n	80019b2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685a      	ldr	r2, [r3, #4]
 8001972:	4613      	mov	r3, r2
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	4413      	add	r3, r2
 8001978:	3b23      	subs	r3, #35	@ 0x23
 800197a:	221f      	movs	r2, #31
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	43da      	mvns	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	400a      	ands	r2, r1
 8001988:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	b29b      	uxth	r3, r3
 8001996:	4618      	mov	r0, r3
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685a      	ldr	r2, [r3, #4]
 800199c:	4613      	mov	r3, r2
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	4413      	add	r3, r2
 80019a2:	3b23      	subs	r3, #35	@ 0x23
 80019a4:	fa00 f203 	lsl.w	r2, r0, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	430a      	orrs	r2, r1
 80019ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80019b0:	e023      	b.n	80019fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685a      	ldr	r2, [r3, #4]
 80019bc:	4613      	mov	r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	4413      	add	r3, r2
 80019c2:	3b41      	subs	r3, #65	@ 0x41
 80019c4:	221f      	movs	r2, #31
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	43da      	mvns	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	400a      	ands	r2, r1
 80019d2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	b29b      	uxth	r3, r3
 80019e0:	4618      	mov	r0, r3
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685a      	ldr	r2, [r3, #4]
 80019e6:	4613      	mov	r3, r2
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	4413      	add	r3, r2
 80019ec:	3b41      	subs	r3, #65	@ 0x41
 80019ee:	fa00 f203 	lsl.w	r2, r0, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	430a      	orrs	r2, r1
 80019f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019fa:	4b29      	ldr	r3, [pc, #164]	@ (8001aa0 <HAL_ADC_ConfigChannel+0x250>)
 80019fc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a28      	ldr	r2, [pc, #160]	@ (8001aa4 <HAL_ADC_ConfigChannel+0x254>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d10f      	bne.n	8001a28 <HAL_ADC_ConfigChannel+0x1d8>
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2b12      	cmp	r3, #18
 8001a0e:	d10b      	bne.n	8001a28 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a1d      	ldr	r2, [pc, #116]	@ (8001aa4 <HAL_ADC_ConfigChannel+0x254>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d12b      	bne.n	8001a8a <HAL_ADC_ConfigChannel+0x23a>
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a1c      	ldr	r2, [pc, #112]	@ (8001aa8 <HAL_ADC_ConfigChannel+0x258>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d003      	beq.n	8001a44 <HAL_ADC_ConfigChannel+0x1f4>
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2b11      	cmp	r3, #17
 8001a42:	d122      	bne.n	8001a8a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a11      	ldr	r2, [pc, #68]	@ (8001aa8 <HAL_ADC_ConfigChannel+0x258>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d111      	bne.n	8001a8a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a66:	4b11      	ldr	r3, [pc, #68]	@ (8001aac <HAL_ADC_ConfigChannel+0x25c>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a11      	ldr	r2, [pc, #68]	@ (8001ab0 <HAL_ADC_ConfigChannel+0x260>)
 8001a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a70:	0c9a      	lsrs	r2, r3, #18
 8001a72:	4613      	mov	r3, r2
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	4413      	add	r3, r2
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001a7c:	e002      	b.n	8001a84 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	3b01      	subs	r3, #1
 8001a82:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d1f9      	bne.n	8001a7e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001a92:	2300      	movs	r3, #0
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3714      	adds	r7, #20
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	40012300 	.word	0x40012300
 8001aa4:	40012000 	.word	0x40012000
 8001aa8:	10000012 	.word	0x10000012
 8001aac:	20000000 	.word	0x20000000
 8001ab0:	431bde83 	.word	0x431bde83

08001ab4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001abc:	4b79      	ldr	r3, [pc, #484]	@ (8001ca4 <ADC_Init+0x1f0>)
 8001abe:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	685a      	ldr	r2, [r3, #4]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	431a      	orrs	r2, r3
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	685a      	ldr	r2, [r3, #4]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ae8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	6859      	ldr	r1, [r3, #4]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	021a      	lsls	r2, r3, #8
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	430a      	orrs	r2, r1
 8001afc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	685a      	ldr	r2, [r3, #4]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001b0c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	6859      	ldr	r1, [r3, #4]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689a      	ldr	r2, [r3, #8]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	689a      	ldr	r2, [r3, #8]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b2e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	6899      	ldr	r1, [r3, #8]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	68da      	ldr	r2, [r3, #12]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b46:	4a58      	ldr	r2, [pc, #352]	@ (8001ca8 <ADC_Init+0x1f4>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d022      	beq.n	8001b92 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	689a      	ldr	r2, [r3, #8]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001b5a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	6899      	ldr	r1, [r3, #8]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	430a      	orrs	r2, r1
 8001b6c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	689a      	ldr	r2, [r3, #8]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001b7c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	6899      	ldr	r1, [r3, #8]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	609a      	str	r2, [r3, #8]
 8001b90:	e00f      	b.n	8001bb2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	689a      	ldr	r2, [r3, #8]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ba0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	689a      	ldr	r2, [r3, #8]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001bb0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	689a      	ldr	r2, [r3, #8]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f022 0202 	bic.w	r2, r2, #2
 8001bc0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	6899      	ldr	r1, [r3, #8]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	7e1b      	ldrb	r3, [r3, #24]
 8001bcc:	005a      	lsls	r2, r3, #1
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d01b      	beq.n	8001c18 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	685a      	ldr	r2, [r3, #4]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001bee:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	685a      	ldr	r2, [r3, #4]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001bfe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	6859      	ldr	r1, [r3, #4]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	035a      	lsls	r2, r3, #13
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	430a      	orrs	r2, r1
 8001c14:	605a      	str	r2, [r3, #4]
 8001c16:	e007      	b.n	8001c28 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	685a      	ldr	r2, [r3, #4]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c26:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001c36:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	3b01      	subs	r3, #1
 8001c44:	051a      	lsls	r2, r3, #20
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	689a      	ldr	r2, [r3, #8]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001c5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	6899      	ldr	r1, [r3, #8]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001c6a:	025a      	lsls	r2, r3, #9
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	430a      	orrs	r2, r1
 8001c72:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	689a      	ldr	r2, [r3, #8]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c82:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	6899      	ldr	r1, [r3, #8]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	695b      	ldr	r3, [r3, #20]
 8001c8e:	029a      	lsls	r2, r3, #10
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	430a      	orrs	r2, r1
 8001c96:	609a      	str	r2, [r3, #8]
}
 8001c98:	bf00      	nop
 8001c9a:	3714      	adds	r7, #20
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	40012300 	.word	0x40012300
 8001ca8:	0f000001 	.word	0x0f000001

08001cac <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cb8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cbe:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d13c      	bne.n	8001d40 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cca:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d12b      	bne.n	8001d38 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d127      	bne.n	8001d38 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cee:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d006      	beq.n	8001d04 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d119      	bne.n	8001d38 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	685a      	ldr	r2, [r3, #4]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f022 0220 	bic.w	r2, r2, #32
 8001d12:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d18:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d24:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d105      	bne.n	8001d38 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d30:	f043 0201 	orr.w	r2, r3, #1
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d38:	68f8      	ldr	r0, [r7, #12]
 8001d3a:	f7ff f961 	bl	8001000 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001d3e:	e00e      	b.n	8001d5e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d44:	f003 0310 	and.w	r3, r3, #16
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d003      	beq.n	8001d54 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001d4c:	68f8      	ldr	r0, [r7, #12]
 8001d4e:	f7ff fd75 	bl	800183c <HAL_ADC_ErrorCallback>
}
 8001d52:	e004      	b.n	8001d5e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	4798      	blx	r3
}
 8001d5e:	bf00      	nop
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b084      	sub	sp, #16
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d72:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001d74:	68f8      	ldr	r0, [r7, #12]
 8001d76:	f7ff f939 	bl	8000fec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d7a:	bf00      	nop
 8001d7c:	3710      	adds	r7, #16
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b084      	sub	sp, #16
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d8e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2240      	movs	r2, #64	@ 0x40
 8001d94:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d9a:	f043 0204 	orr.w	r2, r3, #4
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001da2:	68f8      	ldr	r0, [r7, #12]
 8001da4:	f7ff fd4a 	bl	800183c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001da8:	bf00      	nop
 8001daa:	3710      	adds	r7, #16
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f003 0307 	and.w	r3, r3, #7
 8001dbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dc0:	4b0c      	ldr	r3, [pc, #48]	@ (8001df4 <__NVIC_SetPriorityGrouping+0x44>)
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dc6:	68ba      	ldr	r2, [r7, #8]
 8001dc8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001dcc:	4013      	ands	r3, r2
 8001dce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dd8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ddc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001de0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001de2:	4a04      	ldr	r2, [pc, #16]	@ (8001df4 <__NVIC_SetPriorityGrouping+0x44>)
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	60d3      	str	r3, [r2, #12]
}
 8001de8:	bf00      	nop
 8001dea:	3714      	adds	r7, #20
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr
 8001df4:	e000ed00 	.word	0xe000ed00

08001df8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dfc:	4b04      	ldr	r3, [pc, #16]	@ (8001e10 <__NVIC_GetPriorityGrouping+0x18>)
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	0a1b      	lsrs	r3, r3, #8
 8001e02:	f003 0307 	and.w	r3, r3, #7
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr
 8001e10:	e000ed00 	.word	0xe000ed00

08001e14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	db0b      	blt.n	8001e3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e26:	79fb      	ldrb	r3, [r7, #7]
 8001e28:	f003 021f 	and.w	r2, r3, #31
 8001e2c:	4907      	ldr	r1, [pc, #28]	@ (8001e4c <__NVIC_EnableIRQ+0x38>)
 8001e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e32:	095b      	lsrs	r3, r3, #5
 8001e34:	2001      	movs	r0, #1
 8001e36:	fa00 f202 	lsl.w	r2, r0, r2
 8001e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e3e:	bf00      	nop
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	e000e100 	.word	0xe000e100

08001e50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	4603      	mov	r3, r0
 8001e58:	6039      	str	r1, [r7, #0]
 8001e5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	db0a      	blt.n	8001e7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	b2da      	uxtb	r2, r3
 8001e68:	490c      	ldr	r1, [pc, #48]	@ (8001e9c <__NVIC_SetPriority+0x4c>)
 8001e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6e:	0112      	lsls	r2, r2, #4
 8001e70:	b2d2      	uxtb	r2, r2
 8001e72:	440b      	add	r3, r1
 8001e74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e78:	e00a      	b.n	8001e90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	b2da      	uxtb	r2, r3
 8001e7e:	4908      	ldr	r1, [pc, #32]	@ (8001ea0 <__NVIC_SetPriority+0x50>)
 8001e80:	79fb      	ldrb	r3, [r7, #7]
 8001e82:	f003 030f 	and.w	r3, r3, #15
 8001e86:	3b04      	subs	r3, #4
 8001e88:	0112      	lsls	r2, r2, #4
 8001e8a:	b2d2      	uxtb	r2, r2
 8001e8c:	440b      	add	r3, r1
 8001e8e:	761a      	strb	r2, [r3, #24]
}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr
 8001e9c:	e000e100 	.word	0xe000e100
 8001ea0:	e000ed00 	.word	0xe000ed00

08001ea4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b089      	sub	sp, #36	@ 0x24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f003 0307 	and.w	r3, r3, #7
 8001eb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	f1c3 0307 	rsb	r3, r3, #7
 8001ebe:	2b04      	cmp	r3, #4
 8001ec0:	bf28      	it	cs
 8001ec2:	2304      	movcs	r3, #4
 8001ec4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	3304      	adds	r3, #4
 8001eca:	2b06      	cmp	r3, #6
 8001ecc:	d902      	bls.n	8001ed4 <NVIC_EncodePriority+0x30>
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	3b03      	subs	r3, #3
 8001ed2:	e000      	b.n	8001ed6 <NVIC_EncodePriority+0x32>
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	43da      	mvns	r2, r3
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	401a      	ands	r2, r3
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001eec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef6:	43d9      	mvns	r1, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001efc:	4313      	orrs	r3, r2
         );
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3724      	adds	r7, #36	@ 0x24
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
	...

08001f0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	3b01      	subs	r3, #1
 8001f18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f1c:	d301      	bcc.n	8001f22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e00f      	b.n	8001f42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f22:	4a0a      	ldr	r2, [pc, #40]	@ (8001f4c <SysTick_Config+0x40>)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	3b01      	subs	r3, #1
 8001f28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f2a:	210f      	movs	r1, #15
 8001f2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001f30:	f7ff ff8e 	bl	8001e50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f34:	4b05      	ldr	r3, [pc, #20]	@ (8001f4c <SysTick_Config+0x40>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f3a:	4b04      	ldr	r3, [pc, #16]	@ (8001f4c <SysTick_Config+0x40>)
 8001f3c:	2207      	movs	r2, #7
 8001f3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	e000e010 	.word	0xe000e010

08001f50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f7ff ff29 	bl	8001db0 <__NVIC_SetPriorityGrouping>
}
 8001f5e:	bf00      	nop
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b086      	sub	sp, #24
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	60b9      	str	r1, [r7, #8]
 8001f70:	607a      	str	r2, [r7, #4]
 8001f72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f74:	2300      	movs	r3, #0
 8001f76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f78:	f7ff ff3e 	bl	8001df8 <__NVIC_GetPriorityGrouping>
 8001f7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	68b9      	ldr	r1, [r7, #8]
 8001f82:	6978      	ldr	r0, [r7, #20]
 8001f84:	f7ff ff8e 	bl	8001ea4 <NVIC_EncodePriority>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f8e:	4611      	mov	r1, r2
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7ff ff5d 	bl	8001e50 <__NVIC_SetPriority>
}
 8001f96:	bf00      	nop
 8001f98:	3718      	adds	r7, #24
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b082      	sub	sp, #8
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff ff31 	bl	8001e14 <__NVIC_EnableIRQ>
}
 8001fb2:	bf00      	nop
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b082      	sub	sp, #8
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f7ff ffa2 	bl	8001f0c <SysTick_Config>
 8001fc8:	4603      	mov	r3, r0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
	...

08001fd4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001fe0:	f7ff facc 	bl	800157c <HAL_GetTick>
 8001fe4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d101      	bne.n	8001ff0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e099      	b.n	8002124 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2202      	movs	r2, #2
 8001ff4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f022 0201 	bic.w	r2, r2, #1
 800200e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002010:	e00f      	b.n	8002032 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002012:	f7ff fab3 	bl	800157c <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b05      	cmp	r3, #5
 800201e:	d908      	bls.n	8002032 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2220      	movs	r2, #32
 8002024:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2203      	movs	r2, #3
 800202a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e078      	b.n	8002124 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1e8      	bne.n	8002012 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002048:	697a      	ldr	r2, [r7, #20]
 800204a:	4b38      	ldr	r3, [pc, #224]	@ (800212c <HAL_DMA_Init+0x158>)
 800204c:	4013      	ands	r3, r2
 800204e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685a      	ldr	r2, [r3, #4]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800205e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	691b      	ldr	r3, [r3, #16]
 8002064:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800206a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002076:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a1b      	ldr	r3, [r3, #32]
 800207c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800207e:	697a      	ldr	r2, [r7, #20]
 8002080:	4313      	orrs	r3, r2
 8002082:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002088:	2b04      	cmp	r3, #4
 800208a:	d107      	bne.n	800209c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002094:	4313      	orrs	r3, r2
 8002096:	697a      	ldr	r2, [r7, #20]
 8002098:	4313      	orrs	r3, r2
 800209a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	697a      	ldr	r2, [r7, #20]
 80020a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	695b      	ldr	r3, [r3, #20]
 80020aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	f023 0307 	bic.w	r3, r3, #7
 80020b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b8:	697a      	ldr	r2, [r7, #20]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c2:	2b04      	cmp	r3, #4
 80020c4:	d117      	bne.n	80020f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ca:	697a      	ldr	r2, [r7, #20]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d00e      	beq.n	80020f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f000 fa6f 	bl	80025bc <DMA_CheckFifoParam>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d008      	beq.n	80020f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2240      	movs	r2, #64	@ 0x40
 80020e8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2201      	movs	r2, #1
 80020ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80020f2:	2301      	movs	r3, #1
 80020f4:	e016      	b.n	8002124 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	697a      	ldr	r2, [r7, #20]
 80020fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f000 fa26 	bl	8002550 <DMA_CalcBaseAndBitshift>
 8002104:	4603      	mov	r3, r0
 8002106:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800210c:	223f      	movs	r2, #63	@ 0x3f
 800210e:	409a      	lsls	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2201      	movs	r2, #1
 800211e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002122:	2300      	movs	r3, #0
}
 8002124:	4618      	mov	r0, r3
 8002126:	3718      	adds	r7, #24
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	f010803f 	.word	0xf010803f

08002130 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	607a      	str	r2, [r7, #4]
 800213c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800213e:	2300      	movs	r3, #0
 8002140:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002146:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800214e:	2b01      	cmp	r3, #1
 8002150:	d101      	bne.n	8002156 <HAL_DMA_Start_IT+0x26>
 8002152:	2302      	movs	r3, #2
 8002154:	e040      	b.n	80021d8 <HAL_DMA_Start_IT+0xa8>
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2201      	movs	r2, #1
 800215a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b01      	cmp	r3, #1
 8002168:	d12f      	bne.n	80021ca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2202      	movs	r2, #2
 800216e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2200      	movs	r2, #0
 8002176:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	68b9      	ldr	r1, [r7, #8]
 800217e:	68f8      	ldr	r0, [r7, #12]
 8002180:	f000 f9b8 	bl	80024f4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002188:	223f      	movs	r2, #63	@ 0x3f
 800218a:	409a      	lsls	r2, r3
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f042 0216 	orr.w	r2, r2, #22
 800219e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d007      	beq.n	80021b8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f042 0208 	orr.w	r2, r2, #8
 80021b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f042 0201 	orr.w	r2, r2, #1
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	e005      	b.n	80021d6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80021d2:	2302      	movs	r3, #2
 80021d4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80021d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3718      	adds	r7, #24
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80021e8:	2300      	movs	r3, #0
 80021ea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80021ec:	4b8e      	ldr	r3, [pc, #568]	@ (8002428 <HAL_DMA_IRQHandler+0x248>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a8e      	ldr	r2, [pc, #568]	@ (800242c <HAL_DMA_IRQHandler+0x24c>)
 80021f2:	fba2 2303 	umull	r2, r3, r2, r3
 80021f6:	0a9b      	lsrs	r3, r3, #10
 80021f8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021fe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800220a:	2208      	movs	r2, #8
 800220c:	409a      	lsls	r2, r3
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	4013      	ands	r3, r2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d01a      	beq.n	800224c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0304 	and.w	r3, r3, #4
 8002220:	2b00      	cmp	r3, #0
 8002222:	d013      	beq.n	800224c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f022 0204 	bic.w	r2, r2, #4
 8002232:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002238:	2208      	movs	r2, #8
 800223a:	409a      	lsls	r2, r3
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002244:	f043 0201 	orr.w	r2, r3, #1
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002250:	2201      	movs	r2, #1
 8002252:	409a      	lsls	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	4013      	ands	r3, r2
 8002258:	2b00      	cmp	r3, #0
 800225a:	d012      	beq.n	8002282 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	695b      	ldr	r3, [r3, #20]
 8002262:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00b      	beq.n	8002282 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800226e:	2201      	movs	r2, #1
 8002270:	409a      	lsls	r2, r3
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800227a:	f043 0202 	orr.w	r2, r3, #2
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002286:	2204      	movs	r2, #4
 8002288:	409a      	lsls	r2, r3
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	4013      	ands	r3, r2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d012      	beq.n	80022b8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0302 	and.w	r3, r3, #2
 800229c:	2b00      	cmp	r3, #0
 800229e:	d00b      	beq.n	80022b8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022a4:	2204      	movs	r2, #4
 80022a6:	409a      	lsls	r2, r3
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022b0:	f043 0204 	orr.w	r2, r3, #4
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022bc:	2210      	movs	r2, #16
 80022be:	409a      	lsls	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	4013      	ands	r3, r2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d043      	beq.n	8002350 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0308 	and.w	r3, r3, #8
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d03c      	beq.n	8002350 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022da:	2210      	movs	r2, #16
 80022dc:	409a      	lsls	r2, r3
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d018      	beq.n	8002322 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d108      	bne.n	8002310 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002302:	2b00      	cmp	r3, #0
 8002304:	d024      	beq.n	8002350 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	4798      	blx	r3
 800230e:	e01f      	b.n	8002350 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002314:	2b00      	cmp	r3, #0
 8002316:	d01b      	beq.n	8002350 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	4798      	blx	r3
 8002320:	e016      	b.n	8002350 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800232c:	2b00      	cmp	r3, #0
 800232e:	d107      	bne.n	8002340 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f022 0208 	bic.w	r2, r2, #8
 800233e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002344:	2b00      	cmp	r3, #0
 8002346:	d003      	beq.n	8002350 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002354:	2220      	movs	r2, #32
 8002356:	409a      	lsls	r2, r3
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	4013      	ands	r3, r2
 800235c:	2b00      	cmp	r3, #0
 800235e:	f000 808f 	beq.w	8002480 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0310 	and.w	r3, r3, #16
 800236c:	2b00      	cmp	r3, #0
 800236e:	f000 8087 	beq.w	8002480 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002376:	2220      	movs	r2, #32
 8002378:	409a      	lsls	r2, r3
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2b05      	cmp	r3, #5
 8002388:	d136      	bne.n	80023f8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f022 0216 	bic.w	r2, r2, #22
 8002398:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	695a      	ldr	r2, [r3, #20]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80023a8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d103      	bne.n	80023ba <HAL_DMA_IRQHandler+0x1da>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d007      	beq.n	80023ca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f022 0208 	bic.w	r2, r2, #8
 80023c8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023ce:	223f      	movs	r2, #63	@ 0x3f
 80023d0:	409a      	lsls	r2, r3
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2201      	movs	r2, #1
 80023da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d07e      	beq.n	80024ec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	4798      	blx	r3
        }
        return;
 80023f6:	e079      	b.n	80024ec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d01d      	beq.n	8002442 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d10d      	bne.n	8002430 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002418:	2b00      	cmp	r3, #0
 800241a:	d031      	beq.n	8002480 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	4798      	blx	r3
 8002424:	e02c      	b.n	8002480 <HAL_DMA_IRQHandler+0x2a0>
 8002426:	bf00      	nop
 8002428:	20000000 	.word	0x20000000
 800242c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002434:	2b00      	cmp	r3, #0
 8002436:	d023      	beq.n	8002480 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	4798      	blx	r3
 8002440:	e01e      	b.n	8002480 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800244c:	2b00      	cmp	r3, #0
 800244e:	d10f      	bne.n	8002470 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f022 0210 	bic.w	r2, r2, #16
 800245e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002474:	2b00      	cmp	r3, #0
 8002476:	d003      	beq.n	8002480 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002484:	2b00      	cmp	r3, #0
 8002486:	d032      	beq.n	80024ee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800248c:	f003 0301 	and.w	r3, r3, #1
 8002490:	2b00      	cmp	r3, #0
 8002492:	d022      	beq.n	80024da <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2205      	movs	r2, #5
 8002498:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f022 0201 	bic.w	r2, r2, #1
 80024aa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	3301      	adds	r3, #1
 80024b0:	60bb      	str	r3, [r7, #8]
 80024b2:	697a      	ldr	r2, [r7, #20]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d307      	bcc.n	80024c8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1f2      	bne.n	80024ac <HAL_DMA_IRQHandler+0x2cc>
 80024c6:	e000      	b.n	80024ca <HAL_DMA_IRQHandler+0x2ea>
          break;
 80024c8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2201      	movs	r2, #1
 80024ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d005      	beq.n	80024ee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	4798      	blx	r3
 80024ea:	e000      	b.n	80024ee <HAL_DMA_IRQHandler+0x30e>
        return;
 80024ec:	bf00      	nop
    }
  }
}
 80024ee:	3718      	adds	r7, #24
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b085      	sub	sp, #20
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
 8002500:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002510:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	683a      	ldr	r2, [r7, #0]
 8002518:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	2b40      	cmp	r3, #64	@ 0x40
 8002520:	d108      	bne.n	8002534 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68ba      	ldr	r2, [r7, #8]
 8002530:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002532:	e007      	b.n	8002544 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68ba      	ldr	r2, [r7, #8]
 800253a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	60da      	str	r2, [r3, #12]
}
 8002544:	bf00      	nop
 8002546:	3714      	adds	r7, #20
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	b2db      	uxtb	r3, r3
 800255e:	3b10      	subs	r3, #16
 8002560:	4a14      	ldr	r2, [pc, #80]	@ (80025b4 <DMA_CalcBaseAndBitshift+0x64>)
 8002562:	fba2 2303 	umull	r2, r3, r2, r3
 8002566:	091b      	lsrs	r3, r3, #4
 8002568:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800256a:	4a13      	ldr	r2, [pc, #76]	@ (80025b8 <DMA_CalcBaseAndBitshift+0x68>)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	4413      	add	r3, r2
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	461a      	mov	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2b03      	cmp	r3, #3
 800257c:	d909      	bls.n	8002592 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002586:	f023 0303 	bic.w	r3, r3, #3
 800258a:	1d1a      	adds	r2, r3, #4
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002590:	e007      	b.n	80025a2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800259a:	f023 0303 	bic.w	r3, r3, #3
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3714      	adds	r7, #20
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	aaaaaaab 	.word	0xaaaaaaab
 80025b8:	08004274 	.word	0x08004274

080025bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80025bc:	b480      	push	{r7}
 80025be:	b085      	sub	sp, #20
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025c4:	2300      	movs	r3, #0
 80025c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d11f      	bne.n	8002616 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	2b03      	cmp	r3, #3
 80025da:	d856      	bhi.n	800268a <DMA_CheckFifoParam+0xce>
 80025dc:	a201      	add	r2, pc, #4	@ (adr r2, 80025e4 <DMA_CheckFifoParam+0x28>)
 80025de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025e2:	bf00      	nop
 80025e4:	080025f5 	.word	0x080025f5
 80025e8:	08002607 	.word	0x08002607
 80025ec:	080025f5 	.word	0x080025f5
 80025f0:	0800268b 	.word	0x0800268b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d046      	beq.n	800268e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002604:	e043      	b.n	800268e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800260a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800260e:	d140      	bne.n	8002692 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002614:	e03d      	b.n	8002692 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800261e:	d121      	bne.n	8002664 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	2b03      	cmp	r3, #3
 8002624:	d837      	bhi.n	8002696 <DMA_CheckFifoParam+0xda>
 8002626:	a201      	add	r2, pc, #4	@ (adr r2, 800262c <DMA_CheckFifoParam+0x70>)
 8002628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800262c:	0800263d 	.word	0x0800263d
 8002630:	08002643 	.word	0x08002643
 8002634:	0800263d 	.word	0x0800263d
 8002638:	08002655 	.word	0x08002655
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	73fb      	strb	r3, [r7, #15]
      break;
 8002640:	e030      	b.n	80026a4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002646:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d025      	beq.n	800269a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002652:	e022      	b.n	800269a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002658:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800265c:	d11f      	bne.n	800269e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002662:	e01c      	b.n	800269e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	2b02      	cmp	r3, #2
 8002668:	d903      	bls.n	8002672 <DMA_CheckFifoParam+0xb6>
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	2b03      	cmp	r3, #3
 800266e:	d003      	beq.n	8002678 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002670:	e018      	b.n	80026a4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	73fb      	strb	r3, [r7, #15]
      break;
 8002676:	e015      	b.n	80026a4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800267c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d00e      	beq.n	80026a2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	73fb      	strb	r3, [r7, #15]
      break;
 8002688:	e00b      	b.n	80026a2 <DMA_CheckFifoParam+0xe6>
      break;
 800268a:	bf00      	nop
 800268c:	e00a      	b.n	80026a4 <DMA_CheckFifoParam+0xe8>
      break;
 800268e:	bf00      	nop
 8002690:	e008      	b.n	80026a4 <DMA_CheckFifoParam+0xe8>
      break;
 8002692:	bf00      	nop
 8002694:	e006      	b.n	80026a4 <DMA_CheckFifoParam+0xe8>
      break;
 8002696:	bf00      	nop
 8002698:	e004      	b.n	80026a4 <DMA_CheckFifoParam+0xe8>
      break;
 800269a:	bf00      	nop
 800269c:	e002      	b.n	80026a4 <DMA_CheckFifoParam+0xe8>
      break;   
 800269e:	bf00      	nop
 80026a0:	e000      	b.n	80026a4 <DMA_CheckFifoParam+0xe8>
      break;
 80026a2:	bf00      	nop
    }
  } 
  
  return status; 
 80026a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3714      	adds	r7, #20
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop

080026b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b089      	sub	sp, #36	@ 0x24
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026be:	2300      	movs	r3, #0
 80026c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026c2:	2300      	movs	r3, #0
 80026c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026c6:	2300      	movs	r3, #0
 80026c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026ca:	2300      	movs	r3, #0
 80026cc:	61fb      	str	r3, [r7, #28]
 80026ce:	e165      	b.n	800299c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026d0:	2201      	movs	r2, #1
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	697a      	ldr	r2, [r7, #20]
 80026e0:	4013      	ands	r3, r2
 80026e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	f040 8154 	bne.w	8002996 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f003 0303 	and.w	r3, r3, #3
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d005      	beq.n	8002706 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002702:	2b02      	cmp	r3, #2
 8002704:	d130      	bne.n	8002768 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	2203      	movs	r2, #3
 8002712:	fa02 f303 	lsl.w	r3, r2, r3
 8002716:	43db      	mvns	r3, r3
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	4013      	ands	r3, r2
 800271c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	68da      	ldr	r2, [r3, #12]
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	4313      	orrs	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800273c:	2201      	movs	r2, #1
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	43db      	mvns	r3, r3
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	4013      	ands	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	091b      	lsrs	r3, r3, #4
 8002752:	f003 0201 	and.w	r2, r3, #1
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	4313      	orrs	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f003 0303 	and.w	r3, r3, #3
 8002770:	2b03      	cmp	r3, #3
 8002772:	d017      	beq.n	80027a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	2203      	movs	r2, #3
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	43db      	mvns	r3, r3
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	4013      	ands	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	689a      	ldr	r2, [r3, #8]
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	4313      	orrs	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f003 0303 	and.w	r3, r3, #3
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d123      	bne.n	80027f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	08da      	lsrs	r2, r3, #3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	3208      	adds	r2, #8
 80027b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	f003 0307 	and.w	r3, r3, #7
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	220f      	movs	r2, #15
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	43db      	mvns	r3, r3
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	4013      	ands	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	691a      	ldr	r2, [r3, #16]
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	f003 0307 	and.w	r3, r3, #7
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	08da      	lsrs	r2, r3, #3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	3208      	adds	r2, #8
 80027f2:	69b9      	ldr	r1, [r7, #24]
 80027f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	2203      	movs	r2, #3
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	43db      	mvns	r3, r3
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	4013      	ands	r3, r2
 800280e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f003 0203 	and.w	r2, r3, #3
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	4313      	orrs	r3, r2
 8002824:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002834:	2b00      	cmp	r3, #0
 8002836:	f000 80ae 	beq.w	8002996 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800283a:	2300      	movs	r3, #0
 800283c:	60fb      	str	r3, [r7, #12]
 800283e:	4b5d      	ldr	r3, [pc, #372]	@ (80029b4 <HAL_GPIO_Init+0x300>)
 8002840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002842:	4a5c      	ldr	r2, [pc, #368]	@ (80029b4 <HAL_GPIO_Init+0x300>)
 8002844:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002848:	6453      	str	r3, [r2, #68]	@ 0x44
 800284a:	4b5a      	ldr	r3, [pc, #360]	@ (80029b4 <HAL_GPIO_Init+0x300>)
 800284c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800284e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002852:	60fb      	str	r3, [r7, #12]
 8002854:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002856:	4a58      	ldr	r2, [pc, #352]	@ (80029b8 <HAL_GPIO_Init+0x304>)
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	089b      	lsrs	r3, r3, #2
 800285c:	3302      	adds	r3, #2
 800285e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002862:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	f003 0303 	and.w	r3, r3, #3
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	220f      	movs	r2, #15
 800286e:	fa02 f303 	lsl.w	r3, r2, r3
 8002872:	43db      	mvns	r3, r3
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	4013      	ands	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a4f      	ldr	r2, [pc, #316]	@ (80029bc <HAL_GPIO_Init+0x308>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d025      	beq.n	80028ce <HAL_GPIO_Init+0x21a>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a4e      	ldr	r2, [pc, #312]	@ (80029c0 <HAL_GPIO_Init+0x30c>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d01f      	beq.n	80028ca <HAL_GPIO_Init+0x216>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a4d      	ldr	r2, [pc, #308]	@ (80029c4 <HAL_GPIO_Init+0x310>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d019      	beq.n	80028c6 <HAL_GPIO_Init+0x212>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a4c      	ldr	r2, [pc, #304]	@ (80029c8 <HAL_GPIO_Init+0x314>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d013      	beq.n	80028c2 <HAL_GPIO_Init+0x20e>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a4b      	ldr	r2, [pc, #300]	@ (80029cc <HAL_GPIO_Init+0x318>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d00d      	beq.n	80028be <HAL_GPIO_Init+0x20a>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a4a      	ldr	r2, [pc, #296]	@ (80029d0 <HAL_GPIO_Init+0x31c>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d007      	beq.n	80028ba <HAL_GPIO_Init+0x206>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a49      	ldr	r2, [pc, #292]	@ (80029d4 <HAL_GPIO_Init+0x320>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d101      	bne.n	80028b6 <HAL_GPIO_Init+0x202>
 80028b2:	2306      	movs	r3, #6
 80028b4:	e00c      	b.n	80028d0 <HAL_GPIO_Init+0x21c>
 80028b6:	2307      	movs	r3, #7
 80028b8:	e00a      	b.n	80028d0 <HAL_GPIO_Init+0x21c>
 80028ba:	2305      	movs	r3, #5
 80028bc:	e008      	b.n	80028d0 <HAL_GPIO_Init+0x21c>
 80028be:	2304      	movs	r3, #4
 80028c0:	e006      	b.n	80028d0 <HAL_GPIO_Init+0x21c>
 80028c2:	2303      	movs	r3, #3
 80028c4:	e004      	b.n	80028d0 <HAL_GPIO_Init+0x21c>
 80028c6:	2302      	movs	r3, #2
 80028c8:	e002      	b.n	80028d0 <HAL_GPIO_Init+0x21c>
 80028ca:	2301      	movs	r3, #1
 80028cc:	e000      	b.n	80028d0 <HAL_GPIO_Init+0x21c>
 80028ce:	2300      	movs	r3, #0
 80028d0:	69fa      	ldr	r2, [r7, #28]
 80028d2:	f002 0203 	and.w	r2, r2, #3
 80028d6:	0092      	lsls	r2, r2, #2
 80028d8:	4093      	lsls	r3, r2
 80028da:	69ba      	ldr	r2, [r7, #24]
 80028dc:	4313      	orrs	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028e0:	4935      	ldr	r1, [pc, #212]	@ (80029b8 <HAL_GPIO_Init+0x304>)
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	089b      	lsrs	r3, r3, #2
 80028e6:	3302      	adds	r3, #2
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028ee:	4b3a      	ldr	r3, [pc, #232]	@ (80029d8 <HAL_GPIO_Init+0x324>)
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	43db      	mvns	r3, r3
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	4013      	ands	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d003      	beq.n	8002912 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	4313      	orrs	r3, r2
 8002910:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002912:	4a31      	ldr	r2, [pc, #196]	@ (80029d8 <HAL_GPIO_Init+0x324>)
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002918:	4b2f      	ldr	r3, [pc, #188]	@ (80029d8 <HAL_GPIO_Init+0x324>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	43db      	mvns	r3, r3
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	4013      	ands	r3, r2
 8002926:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d003      	beq.n	800293c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	4313      	orrs	r3, r2
 800293a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800293c:	4a26      	ldr	r2, [pc, #152]	@ (80029d8 <HAL_GPIO_Init+0x324>)
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002942:	4b25      	ldr	r3, [pc, #148]	@ (80029d8 <HAL_GPIO_Init+0x324>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	43db      	mvns	r3, r3
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	4013      	ands	r3, r2
 8002950:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d003      	beq.n	8002966 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	4313      	orrs	r3, r2
 8002964:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002966:	4a1c      	ldr	r2, [pc, #112]	@ (80029d8 <HAL_GPIO_Init+0x324>)
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800296c:	4b1a      	ldr	r3, [pc, #104]	@ (80029d8 <HAL_GPIO_Init+0x324>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	43db      	mvns	r3, r3
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	4013      	ands	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d003      	beq.n	8002990 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	4313      	orrs	r3, r2
 800298e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002990:	4a11      	ldr	r2, [pc, #68]	@ (80029d8 <HAL_GPIO_Init+0x324>)
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	3301      	adds	r3, #1
 800299a:	61fb      	str	r3, [r7, #28]
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	2b0f      	cmp	r3, #15
 80029a0:	f67f ae96 	bls.w	80026d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029a4:	bf00      	nop
 80029a6:	bf00      	nop
 80029a8:	3724      	adds	r7, #36	@ 0x24
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	40023800 	.word	0x40023800
 80029b8:	40013800 	.word	0x40013800
 80029bc:	40020000 	.word	0x40020000
 80029c0:	40020400 	.word	0x40020400
 80029c4:	40020800 	.word	0x40020800
 80029c8:	40020c00 	.word	0x40020c00
 80029cc:	40021000 	.word	0x40021000
 80029d0:	40021400 	.word	0x40021400
 80029d4:	40021800 	.word	0x40021800
 80029d8:	40013c00 	.word	0x40013c00

080029dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	460b      	mov	r3, r1
 80029e6:	807b      	strh	r3, [r7, #2]
 80029e8:	4613      	mov	r3, r2
 80029ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029ec:	787b      	ldrb	r3, [r7, #1]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d003      	beq.n	80029fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029f2:	887a      	ldrh	r2, [r7, #2]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029f8:	e003      	b.n	8002a02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029fa:	887b      	ldrh	r3, [r7, #2]
 80029fc:	041a      	lsls	r2, r3, #16
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	619a      	str	r2, [r3, #24]
}
 8002a02:	bf00      	nop
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
	...

08002a10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d101      	bne.n	8002a24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e0cc      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a24:	4b68      	ldr	r3, [pc, #416]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 030f 	and.w	r3, r3, #15
 8002a2c:	683a      	ldr	r2, [r7, #0]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d90c      	bls.n	8002a4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a32:	4b65      	ldr	r3, [pc, #404]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	b2d2      	uxtb	r2, r2
 8002a38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a3a:	4b63      	ldr	r3, [pc, #396]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 030f 	and.w	r3, r3, #15
 8002a42:	683a      	ldr	r2, [r7, #0]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d001      	beq.n	8002a4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e0b8      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d020      	beq.n	8002a9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0304 	and.w	r3, r3, #4
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d005      	beq.n	8002a70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a64:	4b59      	ldr	r3, [pc, #356]	@ (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	4a58      	ldr	r2, [pc, #352]	@ (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002a6a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002a6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0308 	and.w	r3, r3, #8
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d005      	beq.n	8002a88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a7c:	4b53      	ldr	r3, [pc, #332]	@ (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	4a52      	ldr	r2, [pc, #328]	@ (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002a82:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002a86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a88:	4b50      	ldr	r3, [pc, #320]	@ (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	494d      	ldr	r1, [pc, #308]	@ (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d044      	beq.n	8002b30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d107      	bne.n	8002abe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aae:	4b47      	ldr	r3, [pc, #284]	@ (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d119      	bne.n	8002aee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e07f      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d003      	beq.n	8002ace <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002aca:	2b03      	cmp	r3, #3
 8002acc:	d107      	bne.n	8002ade <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ace:	4b3f      	ldr	r3, [pc, #252]	@ (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d109      	bne.n	8002aee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e06f      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ade:	4b3b      	ldr	r3, [pc, #236]	@ (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e067      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aee:	4b37      	ldr	r3, [pc, #220]	@ (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f023 0203 	bic.w	r2, r3, #3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	4934      	ldr	r1, [pc, #208]	@ (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b00:	f7fe fd3c 	bl	800157c <HAL_GetTick>
 8002b04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b06:	e00a      	b.n	8002b1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b08:	f7fe fd38 	bl	800157c <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e04f      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b1e:	4b2b      	ldr	r3, [pc, #172]	@ (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f003 020c 	and.w	r2, r3, #12
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d1eb      	bne.n	8002b08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b30:	4b25      	ldr	r3, [pc, #148]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 030f 	and.w	r3, r3, #15
 8002b38:	683a      	ldr	r2, [r7, #0]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d20c      	bcs.n	8002b58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b3e:	4b22      	ldr	r3, [pc, #136]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	b2d2      	uxtb	r2, r2
 8002b44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b46:	4b20      	ldr	r3, [pc, #128]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 030f 	and.w	r3, r3, #15
 8002b4e:	683a      	ldr	r2, [r7, #0]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d001      	beq.n	8002b58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e032      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0304 	and.w	r3, r3, #4
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d008      	beq.n	8002b76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b64:	4b19      	ldr	r3, [pc, #100]	@ (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	4916      	ldr	r1, [pc, #88]	@ (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0308 	and.w	r3, r3, #8
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d009      	beq.n	8002b96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b82:	4b12      	ldr	r3, [pc, #72]	@ (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	490e      	ldr	r1, [pc, #56]	@ (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b96:	f000 f855 	bl	8002c44 <HAL_RCC_GetSysClockFreq>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	091b      	lsrs	r3, r3, #4
 8002ba2:	f003 030f 	and.w	r3, r3, #15
 8002ba6:	490a      	ldr	r1, [pc, #40]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002ba8:	5ccb      	ldrb	r3, [r1, r3]
 8002baa:	fa22 f303 	lsr.w	r3, r2, r3
 8002bae:	4a09      	ldr	r2, [pc, #36]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002bb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002bb2:	4b09      	ldr	r3, [pc, #36]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7fe fc9c 	bl	80014f4 <HAL_InitTick>

  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	40023c00 	.word	0x40023c00
 8002bcc:	40023800 	.word	0x40023800
 8002bd0:	0800425c 	.word	0x0800425c
 8002bd4:	20000000 	.word	0x20000000
 8002bd8:	20000004 	.word	0x20000004

08002bdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002be0:	4b03      	ldr	r3, [pc, #12]	@ (8002bf0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002be2:	681b      	ldr	r3, [r3, #0]
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	20000000 	.word	0x20000000

08002bf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002bf8:	f7ff fff0 	bl	8002bdc <HAL_RCC_GetHCLKFreq>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	4b05      	ldr	r3, [pc, #20]	@ (8002c14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	0a9b      	lsrs	r3, r3, #10
 8002c04:	f003 0307 	and.w	r3, r3, #7
 8002c08:	4903      	ldr	r1, [pc, #12]	@ (8002c18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c0a:	5ccb      	ldrb	r3, [r1, r3]
 8002c0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	40023800 	.word	0x40023800
 8002c18:	0800426c 	.word	0x0800426c

08002c1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c20:	f7ff ffdc 	bl	8002bdc <HAL_RCC_GetHCLKFreq>
 8002c24:	4602      	mov	r2, r0
 8002c26:	4b05      	ldr	r3, [pc, #20]	@ (8002c3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	0b5b      	lsrs	r3, r3, #13
 8002c2c:	f003 0307 	and.w	r3, r3, #7
 8002c30:	4903      	ldr	r1, [pc, #12]	@ (8002c40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c32:	5ccb      	ldrb	r3, [r1, r3]
 8002c34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	40023800 	.word	0x40023800
 8002c40:	0800426c 	.word	0x0800426c

08002c44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c48:	b0ae      	sub	sp, #184	@ 0xb8
 8002c4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002c52:	2300      	movs	r3, #0
 8002c54:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002c64:	2300      	movs	r3, #0
 8002c66:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c6a:	4bcb      	ldr	r3, [pc, #812]	@ (8002f98 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f003 030c 	and.w	r3, r3, #12
 8002c72:	2b0c      	cmp	r3, #12
 8002c74:	f200 8206 	bhi.w	8003084 <HAL_RCC_GetSysClockFreq+0x440>
 8002c78:	a201      	add	r2, pc, #4	@ (adr r2, 8002c80 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c7e:	bf00      	nop
 8002c80:	08002cb5 	.word	0x08002cb5
 8002c84:	08003085 	.word	0x08003085
 8002c88:	08003085 	.word	0x08003085
 8002c8c:	08003085 	.word	0x08003085
 8002c90:	08002cbd 	.word	0x08002cbd
 8002c94:	08003085 	.word	0x08003085
 8002c98:	08003085 	.word	0x08003085
 8002c9c:	08003085 	.word	0x08003085
 8002ca0:	08002cc5 	.word	0x08002cc5
 8002ca4:	08003085 	.word	0x08003085
 8002ca8:	08003085 	.word	0x08003085
 8002cac:	08003085 	.word	0x08003085
 8002cb0:	08002eb5 	.word	0x08002eb5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cb4:	4bb9      	ldr	r3, [pc, #740]	@ (8002f9c <HAL_RCC_GetSysClockFreq+0x358>)
 8002cb6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8002cba:	e1e7      	b.n	800308c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cbc:	4bb8      	ldr	r3, [pc, #736]	@ (8002fa0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002cbe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002cc2:	e1e3      	b.n	800308c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cc4:	4bb4      	ldr	r3, [pc, #720]	@ (8002f98 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ccc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cd0:	4bb1      	ldr	r3, [pc, #708]	@ (8002f98 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d071      	beq.n	8002dc0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cdc:	4bae      	ldr	r3, [pc, #696]	@ (8002f98 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	099b      	lsrs	r3, r3, #6
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002ce8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002cec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002cf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cf4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002cfe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002d02:	4622      	mov	r2, r4
 8002d04:	462b      	mov	r3, r5
 8002d06:	f04f 0000 	mov.w	r0, #0
 8002d0a:	f04f 0100 	mov.w	r1, #0
 8002d0e:	0159      	lsls	r1, r3, #5
 8002d10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d14:	0150      	lsls	r0, r2, #5
 8002d16:	4602      	mov	r2, r0
 8002d18:	460b      	mov	r3, r1
 8002d1a:	4621      	mov	r1, r4
 8002d1c:	1a51      	subs	r1, r2, r1
 8002d1e:	6439      	str	r1, [r7, #64]	@ 0x40
 8002d20:	4629      	mov	r1, r5
 8002d22:	eb63 0301 	sbc.w	r3, r3, r1
 8002d26:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d28:	f04f 0200 	mov.w	r2, #0
 8002d2c:	f04f 0300 	mov.w	r3, #0
 8002d30:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002d34:	4649      	mov	r1, r9
 8002d36:	018b      	lsls	r3, r1, #6
 8002d38:	4641      	mov	r1, r8
 8002d3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d3e:	4641      	mov	r1, r8
 8002d40:	018a      	lsls	r2, r1, #6
 8002d42:	4641      	mov	r1, r8
 8002d44:	1a51      	subs	r1, r2, r1
 8002d46:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002d48:	4649      	mov	r1, r9
 8002d4a:	eb63 0301 	sbc.w	r3, r3, r1
 8002d4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d50:	f04f 0200 	mov.w	r2, #0
 8002d54:	f04f 0300 	mov.w	r3, #0
 8002d58:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002d5c:	4649      	mov	r1, r9
 8002d5e:	00cb      	lsls	r3, r1, #3
 8002d60:	4641      	mov	r1, r8
 8002d62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d66:	4641      	mov	r1, r8
 8002d68:	00ca      	lsls	r2, r1, #3
 8002d6a:	4610      	mov	r0, r2
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	4603      	mov	r3, r0
 8002d70:	4622      	mov	r2, r4
 8002d72:	189b      	adds	r3, r3, r2
 8002d74:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d76:	462b      	mov	r3, r5
 8002d78:	460a      	mov	r2, r1
 8002d7a:	eb42 0303 	adc.w	r3, r2, r3
 8002d7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d80:	f04f 0200 	mov.w	r2, #0
 8002d84:	f04f 0300 	mov.w	r3, #0
 8002d88:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002d8c:	4629      	mov	r1, r5
 8002d8e:	024b      	lsls	r3, r1, #9
 8002d90:	4621      	mov	r1, r4
 8002d92:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d96:	4621      	mov	r1, r4
 8002d98:	024a      	lsls	r2, r1, #9
 8002d9a:	4610      	mov	r0, r2
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002da2:	2200      	movs	r2, #0
 8002da4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002da8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002dac:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002db0:	f7fd fd60 	bl	8000874 <__aeabi_uldivmod>
 8002db4:	4602      	mov	r2, r0
 8002db6:	460b      	mov	r3, r1
 8002db8:	4613      	mov	r3, r2
 8002dba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002dbe:	e067      	b.n	8002e90 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dc0:	4b75      	ldr	r3, [pc, #468]	@ (8002f98 <HAL_RCC_GetSysClockFreq+0x354>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	099b      	lsrs	r3, r3, #6
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002dcc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002dd0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002dd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dd8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002dda:	2300      	movs	r3, #0
 8002ddc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002dde:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002de2:	4622      	mov	r2, r4
 8002de4:	462b      	mov	r3, r5
 8002de6:	f04f 0000 	mov.w	r0, #0
 8002dea:	f04f 0100 	mov.w	r1, #0
 8002dee:	0159      	lsls	r1, r3, #5
 8002df0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002df4:	0150      	lsls	r0, r2, #5
 8002df6:	4602      	mov	r2, r0
 8002df8:	460b      	mov	r3, r1
 8002dfa:	4621      	mov	r1, r4
 8002dfc:	1a51      	subs	r1, r2, r1
 8002dfe:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002e00:	4629      	mov	r1, r5
 8002e02:	eb63 0301 	sbc.w	r3, r3, r1
 8002e06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e08:	f04f 0200 	mov.w	r2, #0
 8002e0c:	f04f 0300 	mov.w	r3, #0
 8002e10:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002e14:	4649      	mov	r1, r9
 8002e16:	018b      	lsls	r3, r1, #6
 8002e18:	4641      	mov	r1, r8
 8002e1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e1e:	4641      	mov	r1, r8
 8002e20:	018a      	lsls	r2, r1, #6
 8002e22:	4641      	mov	r1, r8
 8002e24:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e28:	4649      	mov	r1, r9
 8002e2a:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e2e:	f04f 0200 	mov.w	r2, #0
 8002e32:	f04f 0300 	mov.w	r3, #0
 8002e36:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002e3a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002e3e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e42:	4692      	mov	sl, r2
 8002e44:	469b      	mov	fp, r3
 8002e46:	4623      	mov	r3, r4
 8002e48:	eb1a 0303 	adds.w	r3, sl, r3
 8002e4c:	623b      	str	r3, [r7, #32]
 8002e4e:	462b      	mov	r3, r5
 8002e50:	eb4b 0303 	adc.w	r3, fp, r3
 8002e54:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e56:	f04f 0200 	mov.w	r2, #0
 8002e5a:	f04f 0300 	mov.w	r3, #0
 8002e5e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002e62:	4629      	mov	r1, r5
 8002e64:	028b      	lsls	r3, r1, #10
 8002e66:	4621      	mov	r1, r4
 8002e68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e6c:	4621      	mov	r1, r4
 8002e6e:	028a      	lsls	r2, r1, #10
 8002e70:	4610      	mov	r0, r2
 8002e72:	4619      	mov	r1, r3
 8002e74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002e78:	2200      	movs	r2, #0
 8002e7a:	673b      	str	r3, [r7, #112]	@ 0x70
 8002e7c:	677a      	str	r2, [r7, #116]	@ 0x74
 8002e7e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002e82:	f7fd fcf7 	bl	8000874 <__aeabi_uldivmod>
 8002e86:	4602      	mov	r2, r0
 8002e88:	460b      	mov	r3, r1
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e90:	4b41      	ldr	r3, [pc, #260]	@ (8002f98 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	0c1b      	lsrs	r3, r3, #16
 8002e96:	f003 0303 	and.w	r3, r3, #3
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8002ea2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002ea6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002eb2:	e0eb      	b.n	800308c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002eb4:	4b38      	ldr	r3, [pc, #224]	@ (8002f98 <HAL_RCC_GetSysClockFreq+0x354>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ebc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ec0:	4b35      	ldr	r3, [pc, #212]	@ (8002f98 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d06b      	beq.n	8002fa4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ecc:	4b32      	ldr	r3, [pc, #200]	@ (8002f98 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	099b      	lsrs	r3, r3, #6
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002ed6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002ed8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002eda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ede:	663b      	str	r3, [r7, #96]	@ 0x60
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	667b      	str	r3, [r7, #100]	@ 0x64
 8002ee4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002ee8:	4622      	mov	r2, r4
 8002eea:	462b      	mov	r3, r5
 8002eec:	f04f 0000 	mov.w	r0, #0
 8002ef0:	f04f 0100 	mov.w	r1, #0
 8002ef4:	0159      	lsls	r1, r3, #5
 8002ef6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002efa:	0150      	lsls	r0, r2, #5
 8002efc:	4602      	mov	r2, r0
 8002efe:	460b      	mov	r3, r1
 8002f00:	4621      	mov	r1, r4
 8002f02:	1a51      	subs	r1, r2, r1
 8002f04:	61b9      	str	r1, [r7, #24]
 8002f06:	4629      	mov	r1, r5
 8002f08:	eb63 0301 	sbc.w	r3, r3, r1
 8002f0c:	61fb      	str	r3, [r7, #28]
 8002f0e:	f04f 0200 	mov.w	r2, #0
 8002f12:	f04f 0300 	mov.w	r3, #0
 8002f16:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002f1a:	4659      	mov	r1, fp
 8002f1c:	018b      	lsls	r3, r1, #6
 8002f1e:	4651      	mov	r1, sl
 8002f20:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f24:	4651      	mov	r1, sl
 8002f26:	018a      	lsls	r2, r1, #6
 8002f28:	4651      	mov	r1, sl
 8002f2a:	ebb2 0801 	subs.w	r8, r2, r1
 8002f2e:	4659      	mov	r1, fp
 8002f30:	eb63 0901 	sbc.w	r9, r3, r1
 8002f34:	f04f 0200 	mov.w	r2, #0
 8002f38:	f04f 0300 	mov.w	r3, #0
 8002f3c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f40:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f44:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f48:	4690      	mov	r8, r2
 8002f4a:	4699      	mov	r9, r3
 8002f4c:	4623      	mov	r3, r4
 8002f4e:	eb18 0303 	adds.w	r3, r8, r3
 8002f52:	613b      	str	r3, [r7, #16]
 8002f54:	462b      	mov	r3, r5
 8002f56:	eb49 0303 	adc.w	r3, r9, r3
 8002f5a:	617b      	str	r3, [r7, #20]
 8002f5c:	f04f 0200 	mov.w	r2, #0
 8002f60:	f04f 0300 	mov.w	r3, #0
 8002f64:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002f68:	4629      	mov	r1, r5
 8002f6a:	024b      	lsls	r3, r1, #9
 8002f6c:	4621      	mov	r1, r4
 8002f6e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f72:	4621      	mov	r1, r4
 8002f74:	024a      	lsls	r2, r1, #9
 8002f76:	4610      	mov	r0, r2
 8002f78:	4619      	mov	r1, r3
 8002f7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002f7e:	2200      	movs	r2, #0
 8002f80:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002f82:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002f84:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002f88:	f7fd fc74 	bl	8000874 <__aeabi_uldivmod>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	460b      	mov	r3, r1
 8002f90:	4613      	mov	r3, r2
 8002f92:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002f96:	e065      	b.n	8003064 <HAL_RCC_GetSysClockFreq+0x420>
 8002f98:	40023800 	.word	0x40023800
 8002f9c:	00f42400 	.word	0x00f42400
 8002fa0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fa4:	4b3d      	ldr	r3, [pc, #244]	@ (800309c <HAL_RCC_GetSysClockFreq+0x458>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	099b      	lsrs	r3, r3, #6
 8002faa:	2200      	movs	r2, #0
 8002fac:	4618      	mov	r0, r3
 8002fae:	4611      	mov	r1, r2
 8002fb0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002fb4:	653b      	str	r3, [r7, #80]	@ 0x50
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	657b      	str	r3, [r7, #84]	@ 0x54
 8002fba:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002fbe:	4642      	mov	r2, r8
 8002fc0:	464b      	mov	r3, r9
 8002fc2:	f04f 0000 	mov.w	r0, #0
 8002fc6:	f04f 0100 	mov.w	r1, #0
 8002fca:	0159      	lsls	r1, r3, #5
 8002fcc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fd0:	0150      	lsls	r0, r2, #5
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	4641      	mov	r1, r8
 8002fd8:	1a51      	subs	r1, r2, r1
 8002fda:	60b9      	str	r1, [r7, #8]
 8002fdc:	4649      	mov	r1, r9
 8002fde:	eb63 0301 	sbc.w	r3, r3, r1
 8002fe2:	60fb      	str	r3, [r7, #12]
 8002fe4:	f04f 0200 	mov.w	r2, #0
 8002fe8:	f04f 0300 	mov.w	r3, #0
 8002fec:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002ff0:	4659      	mov	r1, fp
 8002ff2:	018b      	lsls	r3, r1, #6
 8002ff4:	4651      	mov	r1, sl
 8002ff6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ffa:	4651      	mov	r1, sl
 8002ffc:	018a      	lsls	r2, r1, #6
 8002ffe:	4651      	mov	r1, sl
 8003000:	1a54      	subs	r4, r2, r1
 8003002:	4659      	mov	r1, fp
 8003004:	eb63 0501 	sbc.w	r5, r3, r1
 8003008:	f04f 0200 	mov.w	r2, #0
 800300c:	f04f 0300 	mov.w	r3, #0
 8003010:	00eb      	lsls	r3, r5, #3
 8003012:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003016:	00e2      	lsls	r2, r4, #3
 8003018:	4614      	mov	r4, r2
 800301a:	461d      	mov	r5, r3
 800301c:	4643      	mov	r3, r8
 800301e:	18e3      	adds	r3, r4, r3
 8003020:	603b      	str	r3, [r7, #0]
 8003022:	464b      	mov	r3, r9
 8003024:	eb45 0303 	adc.w	r3, r5, r3
 8003028:	607b      	str	r3, [r7, #4]
 800302a:	f04f 0200 	mov.w	r2, #0
 800302e:	f04f 0300 	mov.w	r3, #0
 8003032:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003036:	4629      	mov	r1, r5
 8003038:	028b      	lsls	r3, r1, #10
 800303a:	4621      	mov	r1, r4
 800303c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003040:	4621      	mov	r1, r4
 8003042:	028a      	lsls	r2, r1, #10
 8003044:	4610      	mov	r0, r2
 8003046:	4619      	mov	r1, r3
 8003048:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800304c:	2200      	movs	r2, #0
 800304e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003050:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003052:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003056:	f7fd fc0d 	bl	8000874 <__aeabi_uldivmod>
 800305a:	4602      	mov	r2, r0
 800305c:	460b      	mov	r3, r1
 800305e:	4613      	mov	r3, r2
 8003060:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003064:	4b0d      	ldr	r3, [pc, #52]	@ (800309c <HAL_RCC_GetSysClockFreq+0x458>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	0f1b      	lsrs	r3, r3, #28
 800306a:	f003 0307 	and.w	r3, r3, #7
 800306e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8003072:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003076:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800307a:	fbb2 f3f3 	udiv	r3, r2, r3
 800307e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003082:	e003      	b.n	800308c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003084:	4b06      	ldr	r3, [pc, #24]	@ (80030a0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003086:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800308a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800308c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003090:	4618      	mov	r0, r3
 8003092:	37b8      	adds	r7, #184	@ 0xb8
 8003094:	46bd      	mov	sp, r7
 8003096:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800309a:	bf00      	nop
 800309c:	40023800 	.word	0x40023800
 80030a0:	00f42400 	.word	0x00f42400

080030a4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b086      	sub	sp, #24
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d101      	bne.n	80030b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e28d      	b.n	80035d2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	2b00      	cmp	r3, #0
 80030c0:	f000 8083 	beq.w	80031ca <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80030c4:	4b94      	ldr	r3, [pc, #592]	@ (8003318 <HAL_RCC_OscConfig+0x274>)
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f003 030c 	and.w	r3, r3, #12
 80030cc:	2b04      	cmp	r3, #4
 80030ce:	d019      	beq.n	8003104 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80030d0:	4b91      	ldr	r3, [pc, #580]	@ (8003318 <HAL_RCC_OscConfig+0x274>)
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80030d8:	2b08      	cmp	r3, #8
 80030da:	d106      	bne.n	80030ea <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80030dc:	4b8e      	ldr	r3, [pc, #568]	@ (8003318 <HAL_RCC_OscConfig+0x274>)
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80030e8:	d00c      	beq.n	8003104 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030ea:	4b8b      	ldr	r3, [pc, #556]	@ (8003318 <HAL_RCC_OscConfig+0x274>)
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80030f2:	2b0c      	cmp	r3, #12
 80030f4:	d112      	bne.n	800311c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030f6:	4b88      	ldr	r3, [pc, #544]	@ (8003318 <HAL_RCC_OscConfig+0x274>)
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003102:	d10b      	bne.n	800311c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003104:	4b84      	ldr	r3, [pc, #528]	@ (8003318 <HAL_RCC_OscConfig+0x274>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d05b      	beq.n	80031c8 <HAL_RCC_OscConfig+0x124>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d157      	bne.n	80031c8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e25a      	b.n	80035d2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003124:	d106      	bne.n	8003134 <HAL_RCC_OscConfig+0x90>
 8003126:	4b7c      	ldr	r3, [pc, #496]	@ (8003318 <HAL_RCC_OscConfig+0x274>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a7b      	ldr	r2, [pc, #492]	@ (8003318 <HAL_RCC_OscConfig+0x274>)
 800312c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003130:	6013      	str	r3, [r2, #0]
 8003132:	e01d      	b.n	8003170 <HAL_RCC_OscConfig+0xcc>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800313c:	d10c      	bne.n	8003158 <HAL_RCC_OscConfig+0xb4>
 800313e:	4b76      	ldr	r3, [pc, #472]	@ (8003318 <HAL_RCC_OscConfig+0x274>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a75      	ldr	r2, [pc, #468]	@ (8003318 <HAL_RCC_OscConfig+0x274>)
 8003144:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003148:	6013      	str	r3, [r2, #0]
 800314a:	4b73      	ldr	r3, [pc, #460]	@ (8003318 <HAL_RCC_OscConfig+0x274>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a72      	ldr	r2, [pc, #456]	@ (8003318 <HAL_RCC_OscConfig+0x274>)
 8003150:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003154:	6013      	str	r3, [r2, #0]
 8003156:	e00b      	b.n	8003170 <HAL_RCC_OscConfig+0xcc>
 8003158:	4b6f      	ldr	r3, [pc, #444]	@ (8003318 <HAL_RCC_OscConfig+0x274>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a6e      	ldr	r2, [pc, #440]	@ (8003318 <HAL_RCC_OscConfig+0x274>)
 800315e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003162:	6013      	str	r3, [r2, #0]
 8003164:	4b6c      	ldr	r3, [pc, #432]	@ (8003318 <HAL_RCC_OscConfig+0x274>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a6b      	ldr	r2, [pc, #428]	@ (8003318 <HAL_RCC_OscConfig+0x274>)
 800316a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800316e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d013      	beq.n	80031a0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003178:	f7fe fa00 	bl	800157c <HAL_GetTick>
 800317c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800317e:	e008      	b.n	8003192 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003180:	f7fe f9fc 	bl	800157c <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b64      	cmp	r3, #100	@ 0x64
 800318c:	d901      	bls.n	8003192 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e21f      	b.n	80035d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003192:	4b61      	ldr	r3, [pc, #388]	@ (8003318 <HAL_RCC_OscConfig+0x274>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d0f0      	beq.n	8003180 <HAL_RCC_OscConfig+0xdc>
 800319e:	e014      	b.n	80031ca <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a0:	f7fe f9ec 	bl	800157c <HAL_GetTick>
 80031a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031a6:	e008      	b.n	80031ba <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031a8:	f7fe f9e8 	bl	800157c <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b64      	cmp	r3, #100	@ 0x64
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e20b      	b.n	80035d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031ba:	4b57      	ldr	r3, [pc, #348]	@ (8003318 <HAL_RCC_OscConfig+0x274>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d1f0      	bne.n	80031a8 <HAL_RCC_OscConfig+0x104>
 80031c6:	e000      	b.n	80031ca <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d06f      	beq.n	80032b6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80031d6:	4b50      	ldr	r3, [pc, #320]	@ (8003318 <HAL_RCC_OscConfig+0x274>)
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f003 030c 	and.w	r3, r3, #12
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d017      	beq.n	8003212 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80031e2:	4b4d      	ldr	r3, [pc, #308]	@ (8003318 <HAL_RCC_OscConfig+0x274>)
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80031ea:	2b08      	cmp	r3, #8
 80031ec:	d105      	bne.n	80031fa <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80031ee:	4b4a      	ldr	r3, [pc, #296]	@ (8003318 <HAL_RCC_OscConfig+0x274>)
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00b      	beq.n	8003212 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031fa:	4b47      	ldr	r3, [pc, #284]	@ (8003318 <HAL_RCC_OscConfig+0x274>)
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003202:	2b0c      	cmp	r3, #12
 8003204:	d11c      	bne.n	8003240 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003206:	4b44      	ldr	r3, [pc, #272]	@ (8003318 <HAL_RCC_OscConfig+0x274>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d116      	bne.n	8003240 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003212:	4b41      	ldr	r3, [pc, #260]	@ (8003318 <HAL_RCC_OscConfig+0x274>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d005      	beq.n	800322a <HAL_RCC_OscConfig+0x186>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d001      	beq.n	800322a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e1d3      	b.n	80035d2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800322a:	4b3b      	ldr	r3, [pc, #236]	@ (8003318 <HAL_RCC_OscConfig+0x274>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	00db      	lsls	r3, r3, #3
 8003238:	4937      	ldr	r1, [pc, #220]	@ (8003318 <HAL_RCC_OscConfig+0x274>)
 800323a:	4313      	orrs	r3, r2
 800323c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800323e:	e03a      	b.n	80032b6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d020      	beq.n	800328a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003248:	4b34      	ldr	r3, [pc, #208]	@ (800331c <HAL_RCC_OscConfig+0x278>)
 800324a:	2201      	movs	r2, #1
 800324c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800324e:	f7fe f995 	bl	800157c <HAL_GetTick>
 8003252:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003254:	e008      	b.n	8003268 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003256:	f7fe f991 	bl	800157c <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	2b02      	cmp	r3, #2
 8003262:	d901      	bls.n	8003268 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e1b4      	b.n	80035d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003268:	4b2b      	ldr	r3, [pc, #172]	@ (8003318 <HAL_RCC_OscConfig+0x274>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d0f0      	beq.n	8003256 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003274:	4b28      	ldr	r3, [pc, #160]	@ (8003318 <HAL_RCC_OscConfig+0x274>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	691b      	ldr	r3, [r3, #16]
 8003280:	00db      	lsls	r3, r3, #3
 8003282:	4925      	ldr	r1, [pc, #148]	@ (8003318 <HAL_RCC_OscConfig+0x274>)
 8003284:	4313      	orrs	r3, r2
 8003286:	600b      	str	r3, [r1, #0]
 8003288:	e015      	b.n	80032b6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800328a:	4b24      	ldr	r3, [pc, #144]	@ (800331c <HAL_RCC_OscConfig+0x278>)
 800328c:	2200      	movs	r2, #0
 800328e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003290:	f7fe f974 	bl	800157c <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003296:	e008      	b.n	80032aa <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003298:	f7fe f970 	bl	800157c <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e193      	b.n	80035d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032aa:	4b1b      	ldr	r3, [pc, #108]	@ (8003318 <HAL_RCC_OscConfig+0x274>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d1f0      	bne.n	8003298 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0308 	and.w	r3, r3, #8
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d036      	beq.n	8003330 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d016      	beq.n	80032f8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032ca:	4b15      	ldr	r3, [pc, #84]	@ (8003320 <HAL_RCC_OscConfig+0x27c>)
 80032cc:	2201      	movs	r2, #1
 80032ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d0:	f7fe f954 	bl	800157c <HAL_GetTick>
 80032d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032d6:	e008      	b.n	80032ea <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032d8:	f7fe f950 	bl	800157c <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e173      	b.n	80035d2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032ea:	4b0b      	ldr	r3, [pc, #44]	@ (8003318 <HAL_RCC_OscConfig+0x274>)
 80032ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d0f0      	beq.n	80032d8 <HAL_RCC_OscConfig+0x234>
 80032f6:	e01b      	b.n	8003330 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032f8:	4b09      	ldr	r3, [pc, #36]	@ (8003320 <HAL_RCC_OscConfig+0x27c>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032fe:	f7fe f93d 	bl	800157c <HAL_GetTick>
 8003302:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003304:	e00e      	b.n	8003324 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003306:	f7fe f939 	bl	800157c <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d907      	bls.n	8003324 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e15c      	b.n	80035d2 <HAL_RCC_OscConfig+0x52e>
 8003318:	40023800 	.word	0x40023800
 800331c:	42470000 	.word	0x42470000
 8003320:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003324:	4b8a      	ldr	r3, [pc, #552]	@ (8003550 <HAL_RCC_OscConfig+0x4ac>)
 8003326:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003328:	f003 0302 	and.w	r3, r3, #2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d1ea      	bne.n	8003306 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0304 	and.w	r3, r3, #4
 8003338:	2b00      	cmp	r3, #0
 800333a:	f000 8097 	beq.w	800346c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800333e:	2300      	movs	r3, #0
 8003340:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003342:	4b83      	ldr	r3, [pc, #524]	@ (8003550 <HAL_RCC_OscConfig+0x4ac>)
 8003344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003346:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d10f      	bne.n	800336e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800334e:	2300      	movs	r3, #0
 8003350:	60bb      	str	r3, [r7, #8]
 8003352:	4b7f      	ldr	r3, [pc, #508]	@ (8003550 <HAL_RCC_OscConfig+0x4ac>)
 8003354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003356:	4a7e      	ldr	r2, [pc, #504]	@ (8003550 <HAL_RCC_OscConfig+0x4ac>)
 8003358:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800335c:	6413      	str	r3, [r2, #64]	@ 0x40
 800335e:	4b7c      	ldr	r3, [pc, #496]	@ (8003550 <HAL_RCC_OscConfig+0x4ac>)
 8003360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003362:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003366:	60bb      	str	r3, [r7, #8]
 8003368:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800336a:	2301      	movs	r3, #1
 800336c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800336e:	4b79      	ldr	r3, [pc, #484]	@ (8003554 <HAL_RCC_OscConfig+0x4b0>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003376:	2b00      	cmp	r3, #0
 8003378:	d118      	bne.n	80033ac <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800337a:	4b76      	ldr	r3, [pc, #472]	@ (8003554 <HAL_RCC_OscConfig+0x4b0>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a75      	ldr	r2, [pc, #468]	@ (8003554 <HAL_RCC_OscConfig+0x4b0>)
 8003380:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003384:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003386:	f7fe f8f9 	bl	800157c <HAL_GetTick>
 800338a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800338c:	e008      	b.n	80033a0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800338e:	f7fe f8f5 	bl	800157c <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	2b02      	cmp	r3, #2
 800339a:	d901      	bls.n	80033a0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e118      	b.n	80035d2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033a0:	4b6c      	ldr	r3, [pc, #432]	@ (8003554 <HAL_RCC_OscConfig+0x4b0>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d0f0      	beq.n	800338e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d106      	bne.n	80033c2 <HAL_RCC_OscConfig+0x31e>
 80033b4:	4b66      	ldr	r3, [pc, #408]	@ (8003550 <HAL_RCC_OscConfig+0x4ac>)
 80033b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033b8:	4a65      	ldr	r2, [pc, #404]	@ (8003550 <HAL_RCC_OscConfig+0x4ac>)
 80033ba:	f043 0301 	orr.w	r3, r3, #1
 80033be:	6713      	str	r3, [r2, #112]	@ 0x70
 80033c0:	e01c      	b.n	80033fc <HAL_RCC_OscConfig+0x358>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	2b05      	cmp	r3, #5
 80033c8:	d10c      	bne.n	80033e4 <HAL_RCC_OscConfig+0x340>
 80033ca:	4b61      	ldr	r3, [pc, #388]	@ (8003550 <HAL_RCC_OscConfig+0x4ac>)
 80033cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ce:	4a60      	ldr	r2, [pc, #384]	@ (8003550 <HAL_RCC_OscConfig+0x4ac>)
 80033d0:	f043 0304 	orr.w	r3, r3, #4
 80033d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80033d6:	4b5e      	ldr	r3, [pc, #376]	@ (8003550 <HAL_RCC_OscConfig+0x4ac>)
 80033d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033da:	4a5d      	ldr	r2, [pc, #372]	@ (8003550 <HAL_RCC_OscConfig+0x4ac>)
 80033dc:	f043 0301 	orr.w	r3, r3, #1
 80033e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80033e2:	e00b      	b.n	80033fc <HAL_RCC_OscConfig+0x358>
 80033e4:	4b5a      	ldr	r3, [pc, #360]	@ (8003550 <HAL_RCC_OscConfig+0x4ac>)
 80033e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033e8:	4a59      	ldr	r2, [pc, #356]	@ (8003550 <HAL_RCC_OscConfig+0x4ac>)
 80033ea:	f023 0301 	bic.w	r3, r3, #1
 80033ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80033f0:	4b57      	ldr	r3, [pc, #348]	@ (8003550 <HAL_RCC_OscConfig+0x4ac>)
 80033f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033f4:	4a56      	ldr	r2, [pc, #344]	@ (8003550 <HAL_RCC_OscConfig+0x4ac>)
 80033f6:	f023 0304 	bic.w	r3, r3, #4
 80033fa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d015      	beq.n	8003430 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003404:	f7fe f8ba 	bl	800157c <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800340a:	e00a      	b.n	8003422 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800340c:	f7fe f8b6 	bl	800157c <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	f241 3288 	movw	r2, #5000	@ 0x1388
 800341a:	4293      	cmp	r3, r2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e0d7      	b.n	80035d2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003422:	4b4b      	ldr	r3, [pc, #300]	@ (8003550 <HAL_RCC_OscConfig+0x4ac>)
 8003424:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d0ee      	beq.n	800340c <HAL_RCC_OscConfig+0x368>
 800342e:	e014      	b.n	800345a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003430:	f7fe f8a4 	bl	800157c <HAL_GetTick>
 8003434:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003436:	e00a      	b.n	800344e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003438:	f7fe f8a0 	bl	800157c <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003446:	4293      	cmp	r3, r2
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e0c1      	b.n	80035d2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800344e:	4b40      	ldr	r3, [pc, #256]	@ (8003550 <HAL_RCC_OscConfig+0x4ac>)
 8003450:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1ee      	bne.n	8003438 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800345a:	7dfb      	ldrb	r3, [r7, #23]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d105      	bne.n	800346c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003460:	4b3b      	ldr	r3, [pc, #236]	@ (8003550 <HAL_RCC_OscConfig+0x4ac>)
 8003462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003464:	4a3a      	ldr	r2, [pc, #232]	@ (8003550 <HAL_RCC_OscConfig+0x4ac>)
 8003466:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800346a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	2b00      	cmp	r3, #0
 8003472:	f000 80ad 	beq.w	80035d0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003476:	4b36      	ldr	r3, [pc, #216]	@ (8003550 <HAL_RCC_OscConfig+0x4ac>)
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f003 030c 	and.w	r3, r3, #12
 800347e:	2b08      	cmp	r3, #8
 8003480:	d060      	beq.n	8003544 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	2b02      	cmp	r3, #2
 8003488:	d145      	bne.n	8003516 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800348a:	4b33      	ldr	r3, [pc, #204]	@ (8003558 <HAL_RCC_OscConfig+0x4b4>)
 800348c:	2200      	movs	r2, #0
 800348e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003490:	f7fe f874 	bl	800157c <HAL_GetTick>
 8003494:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003496:	e008      	b.n	80034aa <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003498:	f7fe f870 	bl	800157c <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e093      	b.n	80035d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034aa:	4b29      	ldr	r3, [pc, #164]	@ (8003550 <HAL_RCC_OscConfig+0x4ac>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1f0      	bne.n	8003498 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	69da      	ldr	r2, [r3, #28]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a1b      	ldr	r3, [r3, #32]
 80034be:	431a      	orrs	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c4:	019b      	lsls	r3, r3, #6
 80034c6:	431a      	orrs	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034cc:	085b      	lsrs	r3, r3, #1
 80034ce:	3b01      	subs	r3, #1
 80034d0:	041b      	lsls	r3, r3, #16
 80034d2:	431a      	orrs	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034d8:	061b      	lsls	r3, r3, #24
 80034da:	431a      	orrs	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034e0:	071b      	lsls	r3, r3, #28
 80034e2:	491b      	ldr	r1, [pc, #108]	@ (8003550 <HAL_RCC_OscConfig+0x4ac>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034e8:	4b1b      	ldr	r3, [pc, #108]	@ (8003558 <HAL_RCC_OscConfig+0x4b4>)
 80034ea:	2201      	movs	r2, #1
 80034ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ee:	f7fe f845 	bl	800157c <HAL_GetTick>
 80034f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034f4:	e008      	b.n	8003508 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034f6:	f7fe f841 	bl	800157c <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	2b02      	cmp	r3, #2
 8003502:	d901      	bls.n	8003508 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e064      	b.n	80035d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003508:	4b11      	ldr	r3, [pc, #68]	@ (8003550 <HAL_RCC_OscConfig+0x4ac>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d0f0      	beq.n	80034f6 <HAL_RCC_OscConfig+0x452>
 8003514:	e05c      	b.n	80035d0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003516:	4b10      	ldr	r3, [pc, #64]	@ (8003558 <HAL_RCC_OscConfig+0x4b4>)
 8003518:	2200      	movs	r2, #0
 800351a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800351c:	f7fe f82e 	bl	800157c <HAL_GetTick>
 8003520:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003522:	e008      	b.n	8003536 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003524:	f7fe f82a 	bl	800157c <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b02      	cmp	r3, #2
 8003530:	d901      	bls.n	8003536 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e04d      	b.n	80035d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003536:	4b06      	ldr	r3, [pc, #24]	@ (8003550 <HAL_RCC_OscConfig+0x4ac>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1f0      	bne.n	8003524 <HAL_RCC_OscConfig+0x480>
 8003542:	e045      	b.n	80035d0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d107      	bne.n	800355c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e040      	b.n	80035d2 <HAL_RCC_OscConfig+0x52e>
 8003550:	40023800 	.word	0x40023800
 8003554:	40007000 	.word	0x40007000
 8003558:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800355c:	4b1f      	ldr	r3, [pc, #124]	@ (80035dc <HAL_RCC_OscConfig+0x538>)
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d030      	beq.n	80035cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003574:	429a      	cmp	r2, r3
 8003576:	d129      	bne.n	80035cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003582:	429a      	cmp	r2, r3
 8003584:	d122      	bne.n	80035cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800358c:	4013      	ands	r3, r2
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003592:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003594:	4293      	cmp	r3, r2
 8003596:	d119      	bne.n	80035cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035a2:	085b      	lsrs	r3, r3, #1
 80035a4:	3b01      	subs	r3, #1
 80035a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d10f      	bne.n	80035cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d107      	bne.n	80035cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035c6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d001      	beq.n	80035d0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e000      	b.n	80035d2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3718      	adds	r7, #24
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	40023800 	.word	0x40023800

080035e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d101      	bne.n	80035f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e041      	b.n	8003676 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d106      	bne.n	800360c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f7fd fe5e 	bl	80012c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2202      	movs	r2, #2
 8003610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	3304      	adds	r3, #4
 800361c:	4619      	mov	r1, r3
 800361e:	4610      	mov	r0, r2
 8003620:	f000 f95e 	bl	80038e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3708      	adds	r7, #8
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
	...

08003680 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003680:	b480      	push	{r7}
 8003682:	b085      	sub	sp, #20
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800368e:	b2db      	uxtb	r3, r3
 8003690:	2b01      	cmp	r3, #1
 8003692:	d001      	beq.n	8003698 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e046      	b.n	8003726 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2202      	movs	r2, #2
 800369c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a23      	ldr	r2, [pc, #140]	@ (8003734 <HAL_TIM_Base_Start+0xb4>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d022      	beq.n	80036f0 <HAL_TIM_Base_Start+0x70>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036b2:	d01d      	beq.n	80036f0 <HAL_TIM_Base_Start+0x70>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a1f      	ldr	r2, [pc, #124]	@ (8003738 <HAL_TIM_Base_Start+0xb8>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d018      	beq.n	80036f0 <HAL_TIM_Base_Start+0x70>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a1e      	ldr	r2, [pc, #120]	@ (800373c <HAL_TIM_Base_Start+0xbc>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d013      	beq.n	80036f0 <HAL_TIM_Base_Start+0x70>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a1c      	ldr	r2, [pc, #112]	@ (8003740 <HAL_TIM_Base_Start+0xc0>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d00e      	beq.n	80036f0 <HAL_TIM_Base_Start+0x70>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a1b      	ldr	r2, [pc, #108]	@ (8003744 <HAL_TIM_Base_Start+0xc4>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d009      	beq.n	80036f0 <HAL_TIM_Base_Start+0x70>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a19      	ldr	r2, [pc, #100]	@ (8003748 <HAL_TIM_Base_Start+0xc8>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d004      	beq.n	80036f0 <HAL_TIM_Base_Start+0x70>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a18      	ldr	r2, [pc, #96]	@ (800374c <HAL_TIM_Base_Start+0xcc>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d111      	bne.n	8003714 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f003 0307 	and.w	r3, r3, #7
 80036fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2b06      	cmp	r3, #6
 8003700:	d010      	beq.n	8003724 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f042 0201 	orr.w	r2, r2, #1
 8003710:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003712:	e007      	b.n	8003724 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f042 0201 	orr.w	r2, r2, #1
 8003722:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3714      	adds	r7, #20
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	40010000 	.word	0x40010000
 8003738:	40000400 	.word	0x40000400
 800373c:	40000800 	.word	0x40000800
 8003740:	40000c00 	.word	0x40000c00
 8003744:	40010400 	.word	0x40010400
 8003748:	40014000 	.word	0x40014000
 800374c:	40001800 	.word	0x40001800

08003750 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800375a:	2300      	movs	r3, #0
 800375c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003764:	2b01      	cmp	r3, #1
 8003766:	d101      	bne.n	800376c <HAL_TIM_ConfigClockSource+0x1c>
 8003768:	2302      	movs	r3, #2
 800376a:	e0b4      	b.n	80038d6 <HAL_TIM_ConfigClockSource+0x186>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2202      	movs	r2, #2
 8003778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800378a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003792:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68ba      	ldr	r2, [r7, #8]
 800379a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037a4:	d03e      	beq.n	8003824 <HAL_TIM_ConfigClockSource+0xd4>
 80037a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037aa:	f200 8087 	bhi.w	80038bc <HAL_TIM_ConfigClockSource+0x16c>
 80037ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037b2:	f000 8086 	beq.w	80038c2 <HAL_TIM_ConfigClockSource+0x172>
 80037b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037ba:	d87f      	bhi.n	80038bc <HAL_TIM_ConfigClockSource+0x16c>
 80037bc:	2b70      	cmp	r3, #112	@ 0x70
 80037be:	d01a      	beq.n	80037f6 <HAL_TIM_ConfigClockSource+0xa6>
 80037c0:	2b70      	cmp	r3, #112	@ 0x70
 80037c2:	d87b      	bhi.n	80038bc <HAL_TIM_ConfigClockSource+0x16c>
 80037c4:	2b60      	cmp	r3, #96	@ 0x60
 80037c6:	d050      	beq.n	800386a <HAL_TIM_ConfigClockSource+0x11a>
 80037c8:	2b60      	cmp	r3, #96	@ 0x60
 80037ca:	d877      	bhi.n	80038bc <HAL_TIM_ConfigClockSource+0x16c>
 80037cc:	2b50      	cmp	r3, #80	@ 0x50
 80037ce:	d03c      	beq.n	800384a <HAL_TIM_ConfigClockSource+0xfa>
 80037d0:	2b50      	cmp	r3, #80	@ 0x50
 80037d2:	d873      	bhi.n	80038bc <HAL_TIM_ConfigClockSource+0x16c>
 80037d4:	2b40      	cmp	r3, #64	@ 0x40
 80037d6:	d058      	beq.n	800388a <HAL_TIM_ConfigClockSource+0x13a>
 80037d8:	2b40      	cmp	r3, #64	@ 0x40
 80037da:	d86f      	bhi.n	80038bc <HAL_TIM_ConfigClockSource+0x16c>
 80037dc:	2b30      	cmp	r3, #48	@ 0x30
 80037de:	d064      	beq.n	80038aa <HAL_TIM_ConfigClockSource+0x15a>
 80037e0:	2b30      	cmp	r3, #48	@ 0x30
 80037e2:	d86b      	bhi.n	80038bc <HAL_TIM_ConfigClockSource+0x16c>
 80037e4:	2b20      	cmp	r3, #32
 80037e6:	d060      	beq.n	80038aa <HAL_TIM_ConfigClockSource+0x15a>
 80037e8:	2b20      	cmp	r3, #32
 80037ea:	d867      	bhi.n	80038bc <HAL_TIM_ConfigClockSource+0x16c>
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d05c      	beq.n	80038aa <HAL_TIM_ConfigClockSource+0x15a>
 80037f0:	2b10      	cmp	r3, #16
 80037f2:	d05a      	beq.n	80038aa <HAL_TIM_ConfigClockSource+0x15a>
 80037f4:	e062      	b.n	80038bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003806:	f000 f991 	bl	8003b2c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003818:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68ba      	ldr	r2, [r7, #8]
 8003820:	609a      	str	r2, [r3, #8]
      break;
 8003822:	e04f      	b.n	80038c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003834:	f000 f97a 	bl	8003b2c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689a      	ldr	r2, [r3, #8]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003846:	609a      	str	r2, [r3, #8]
      break;
 8003848:	e03c      	b.n	80038c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003856:	461a      	mov	r2, r3
 8003858:	f000 f8ee 	bl	8003a38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2150      	movs	r1, #80	@ 0x50
 8003862:	4618      	mov	r0, r3
 8003864:	f000 f947 	bl	8003af6 <TIM_ITRx_SetConfig>
      break;
 8003868:	e02c      	b.n	80038c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003876:	461a      	mov	r2, r3
 8003878:	f000 f90d 	bl	8003a96 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2160      	movs	r1, #96	@ 0x60
 8003882:	4618      	mov	r0, r3
 8003884:	f000 f937 	bl	8003af6 <TIM_ITRx_SetConfig>
      break;
 8003888:	e01c      	b.n	80038c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003896:	461a      	mov	r2, r3
 8003898:	f000 f8ce 	bl	8003a38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2140      	movs	r1, #64	@ 0x40
 80038a2:	4618      	mov	r0, r3
 80038a4:	f000 f927 	bl	8003af6 <TIM_ITRx_SetConfig>
      break;
 80038a8:	e00c      	b.n	80038c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4619      	mov	r1, r3
 80038b4:	4610      	mov	r0, r2
 80038b6:	f000 f91e 	bl	8003af6 <TIM_ITRx_SetConfig>
      break;
 80038ba:	e003      	b.n	80038c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	73fb      	strb	r3, [r7, #15]
      break;
 80038c0:	e000      	b.n	80038c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80038c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80038d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3710      	adds	r7, #16
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
	...

080038e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b085      	sub	sp, #20
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4a46      	ldr	r2, [pc, #280]	@ (8003a0c <TIM_Base_SetConfig+0x12c>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d013      	beq.n	8003920 <TIM_Base_SetConfig+0x40>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038fe:	d00f      	beq.n	8003920 <TIM_Base_SetConfig+0x40>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a43      	ldr	r2, [pc, #268]	@ (8003a10 <TIM_Base_SetConfig+0x130>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d00b      	beq.n	8003920 <TIM_Base_SetConfig+0x40>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a42      	ldr	r2, [pc, #264]	@ (8003a14 <TIM_Base_SetConfig+0x134>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d007      	beq.n	8003920 <TIM_Base_SetConfig+0x40>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4a41      	ldr	r2, [pc, #260]	@ (8003a18 <TIM_Base_SetConfig+0x138>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d003      	beq.n	8003920 <TIM_Base_SetConfig+0x40>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a40      	ldr	r2, [pc, #256]	@ (8003a1c <TIM_Base_SetConfig+0x13c>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d108      	bne.n	8003932 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003926:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	4313      	orrs	r3, r2
 8003930:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a35      	ldr	r2, [pc, #212]	@ (8003a0c <TIM_Base_SetConfig+0x12c>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d02b      	beq.n	8003992 <TIM_Base_SetConfig+0xb2>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003940:	d027      	beq.n	8003992 <TIM_Base_SetConfig+0xb2>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a32      	ldr	r2, [pc, #200]	@ (8003a10 <TIM_Base_SetConfig+0x130>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d023      	beq.n	8003992 <TIM_Base_SetConfig+0xb2>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a31      	ldr	r2, [pc, #196]	@ (8003a14 <TIM_Base_SetConfig+0x134>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d01f      	beq.n	8003992 <TIM_Base_SetConfig+0xb2>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a30      	ldr	r2, [pc, #192]	@ (8003a18 <TIM_Base_SetConfig+0x138>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d01b      	beq.n	8003992 <TIM_Base_SetConfig+0xb2>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a2f      	ldr	r2, [pc, #188]	@ (8003a1c <TIM_Base_SetConfig+0x13c>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d017      	beq.n	8003992 <TIM_Base_SetConfig+0xb2>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a2e      	ldr	r2, [pc, #184]	@ (8003a20 <TIM_Base_SetConfig+0x140>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d013      	beq.n	8003992 <TIM_Base_SetConfig+0xb2>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a2d      	ldr	r2, [pc, #180]	@ (8003a24 <TIM_Base_SetConfig+0x144>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d00f      	beq.n	8003992 <TIM_Base_SetConfig+0xb2>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a2c      	ldr	r2, [pc, #176]	@ (8003a28 <TIM_Base_SetConfig+0x148>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d00b      	beq.n	8003992 <TIM_Base_SetConfig+0xb2>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a2b      	ldr	r2, [pc, #172]	@ (8003a2c <TIM_Base_SetConfig+0x14c>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d007      	beq.n	8003992 <TIM_Base_SetConfig+0xb2>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a2a      	ldr	r2, [pc, #168]	@ (8003a30 <TIM_Base_SetConfig+0x150>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d003      	beq.n	8003992 <TIM_Base_SetConfig+0xb2>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a29      	ldr	r2, [pc, #164]	@ (8003a34 <TIM_Base_SetConfig+0x154>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d108      	bne.n	80039a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003998:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	68fa      	ldr	r2, [r7, #12]
 80039b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	689a      	ldr	r2, [r3, #8]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4a10      	ldr	r2, [pc, #64]	@ (8003a0c <TIM_Base_SetConfig+0x12c>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d003      	beq.n	80039d8 <TIM_Base_SetConfig+0xf8>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4a12      	ldr	r2, [pc, #72]	@ (8003a1c <TIM_Base_SetConfig+0x13c>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d103      	bne.n	80039e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	691a      	ldr	r2, [r3, #16]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d105      	bne.n	80039fe <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	f023 0201 	bic.w	r2, r3, #1
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	611a      	str	r2, [r3, #16]
  }
}
 80039fe:	bf00      	nop
 8003a00:	3714      	adds	r7, #20
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop
 8003a0c:	40010000 	.word	0x40010000
 8003a10:	40000400 	.word	0x40000400
 8003a14:	40000800 	.word	0x40000800
 8003a18:	40000c00 	.word	0x40000c00
 8003a1c:	40010400 	.word	0x40010400
 8003a20:	40014000 	.word	0x40014000
 8003a24:	40014400 	.word	0x40014400
 8003a28:	40014800 	.word	0x40014800
 8003a2c:	40001800 	.word	0x40001800
 8003a30:	40001c00 	.word	0x40001c00
 8003a34:	40002000 	.word	0x40002000

08003a38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b087      	sub	sp, #28
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6a1b      	ldr	r3, [r3, #32]
 8003a48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6a1b      	ldr	r3, [r3, #32]
 8003a4e:	f023 0201 	bic.w	r2, r3, #1
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	011b      	lsls	r3, r3, #4
 8003a68:	693a      	ldr	r2, [r7, #16]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	f023 030a 	bic.w	r3, r3, #10
 8003a74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a76:	697a      	ldr	r2, [r7, #20]
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	693a      	ldr	r2, [r7, #16]
 8003a82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	697a      	ldr	r2, [r7, #20]
 8003a88:	621a      	str	r2, [r3, #32]
}
 8003a8a:	bf00      	nop
 8003a8c:	371c      	adds	r7, #28
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr

08003a96 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a96:	b480      	push	{r7}
 8003a98:	b087      	sub	sp, #28
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	60f8      	str	r0, [r7, #12]
 8003a9e:	60b9      	str	r1, [r7, #8]
 8003aa0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
 8003aa6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6a1b      	ldr	r3, [r3, #32]
 8003aac:	f023 0210 	bic.w	r2, r3, #16
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	699b      	ldr	r3, [r3, #24]
 8003ab8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003ac0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	031b      	lsls	r3, r3, #12
 8003ac6:	693a      	ldr	r2, [r7, #16]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003ad2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	011b      	lsls	r3, r3, #4
 8003ad8:	697a      	ldr	r2, [r7, #20]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	621a      	str	r2, [r3, #32]
}
 8003aea:	bf00      	nop
 8003aec:	371c      	adds	r7, #28
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr

08003af6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003af6:	b480      	push	{r7}
 8003af8:	b085      	sub	sp, #20
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
 8003afe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b0e:	683a      	ldr	r2, [r7, #0]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	f043 0307 	orr.w	r3, r3, #7
 8003b18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	68fa      	ldr	r2, [r7, #12]
 8003b1e:	609a      	str	r2, [r3, #8]
}
 8003b20:	bf00      	nop
 8003b22:	3714      	adds	r7, #20
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b087      	sub	sp, #28
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]
 8003b38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003b46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	021a      	lsls	r2, r3, #8
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	431a      	orrs	r2, r3
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	697a      	ldr	r2, [r7, #20]
 8003b5e:	609a      	str	r2, [r3, #8]
}
 8003b60:	bf00      	nop
 8003b62:	371c      	adds	r7, #28
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b085      	sub	sp, #20
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d101      	bne.n	8003b84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b80:	2302      	movs	r3, #2
 8003b82:	e05a      	b.n	8003c3a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2202      	movs	r2, #2
 8003b90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003baa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a21      	ldr	r2, [pc, #132]	@ (8003c48 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d022      	beq.n	8003c0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bd0:	d01d      	beq.n	8003c0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a1d      	ldr	r2, [pc, #116]	@ (8003c4c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d018      	beq.n	8003c0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a1b      	ldr	r2, [pc, #108]	@ (8003c50 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d013      	beq.n	8003c0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a1a      	ldr	r2, [pc, #104]	@ (8003c54 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d00e      	beq.n	8003c0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a18      	ldr	r2, [pc, #96]	@ (8003c58 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d009      	beq.n	8003c0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a17      	ldr	r2, [pc, #92]	@ (8003c5c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d004      	beq.n	8003c0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a15      	ldr	r2, [pc, #84]	@ (8003c60 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d10c      	bne.n	8003c28 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	68ba      	ldr	r2, [r7, #8]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68ba      	ldr	r2, [r7, #8]
 8003c26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3714      	adds	r7, #20
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	40010000 	.word	0x40010000
 8003c4c:	40000400 	.word	0x40000400
 8003c50:	40000800 	.word	0x40000800
 8003c54:	40000c00 	.word	0x40000c00
 8003c58:	40010400 	.word	0x40010400
 8003c5c:	40014000 	.word	0x40014000
 8003c60:	40001800 	.word	0x40001800

08003c64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d101      	bne.n	8003c76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e042      	b.n	8003cfc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d106      	bne.n	8003c90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f7fd fb52 	bl	8001334 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2224      	movs	r2, #36	@ 0x24
 8003c94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68da      	ldr	r2, [r3, #12]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003ca6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f000 f82b 	bl	8003d04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	691a      	ldr	r2, [r3, #16]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003cbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	695a      	ldr	r2, [r3, #20]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003ccc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68da      	ldr	r2, [r3, #12]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003cdc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2220      	movs	r2, #32
 8003ce8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2220      	movs	r2, #32
 8003cf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003cfa:	2300      	movs	r3, #0
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3708      	adds	r7, #8
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d08:	b0c0      	sub	sp, #256	@ 0x100
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	691b      	ldr	r3, [r3, #16]
 8003d18:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d20:	68d9      	ldr	r1, [r3, #12]
 8003d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	ea40 0301 	orr.w	r3, r0, r1
 8003d2c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d32:	689a      	ldr	r2, [r3, #8]
 8003d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	431a      	orrs	r2, r3
 8003d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	431a      	orrs	r2, r3
 8003d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d48:	69db      	ldr	r3, [r3, #28]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003d5c:	f021 010c 	bic.w	r1, r1, #12
 8003d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003d6a:	430b      	orrs	r3, r1
 8003d6c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003d7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d7e:	6999      	ldr	r1, [r3, #24]
 8003d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	ea40 0301 	orr.w	r3, r0, r1
 8003d8a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	4b8f      	ldr	r3, [pc, #572]	@ (8003fd0 <UART_SetConfig+0x2cc>)
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d005      	beq.n	8003da4 <UART_SetConfig+0xa0>
 8003d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	4b8d      	ldr	r3, [pc, #564]	@ (8003fd4 <UART_SetConfig+0x2d0>)
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d104      	bne.n	8003dae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003da4:	f7fe ff3a 	bl	8002c1c <HAL_RCC_GetPCLK2Freq>
 8003da8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003dac:	e003      	b.n	8003db6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003dae:	f7fe ff21 	bl	8002bf4 <HAL_RCC_GetPCLK1Freq>
 8003db2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dba:	69db      	ldr	r3, [r3, #28]
 8003dbc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003dc0:	f040 810c 	bne.w	8003fdc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003dc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003dce:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003dd2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003dd6:	4622      	mov	r2, r4
 8003dd8:	462b      	mov	r3, r5
 8003dda:	1891      	adds	r1, r2, r2
 8003ddc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003dde:	415b      	adcs	r3, r3
 8003de0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003de2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003de6:	4621      	mov	r1, r4
 8003de8:	eb12 0801 	adds.w	r8, r2, r1
 8003dec:	4629      	mov	r1, r5
 8003dee:	eb43 0901 	adc.w	r9, r3, r1
 8003df2:	f04f 0200 	mov.w	r2, #0
 8003df6:	f04f 0300 	mov.w	r3, #0
 8003dfa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003dfe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e06:	4690      	mov	r8, r2
 8003e08:	4699      	mov	r9, r3
 8003e0a:	4623      	mov	r3, r4
 8003e0c:	eb18 0303 	adds.w	r3, r8, r3
 8003e10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003e14:	462b      	mov	r3, r5
 8003e16:	eb49 0303 	adc.w	r3, r9, r3
 8003e1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003e2a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003e2e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003e32:	460b      	mov	r3, r1
 8003e34:	18db      	adds	r3, r3, r3
 8003e36:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e38:	4613      	mov	r3, r2
 8003e3a:	eb42 0303 	adc.w	r3, r2, r3
 8003e3e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003e40:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003e44:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003e48:	f7fc fd14 	bl	8000874 <__aeabi_uldivmod>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	460b      	mov	r3, r1
 8003e50:	4b61      	ldr	r3, [pc, #388]	@ (8003fd8 <UART_SetConfig+0x2d4>)
 8003e52:	fba3 2302 	umull	r2, r3, r3, r2
 8003e56:	095b      	lsrs	r3, r3, #5
 8003e58:	011c      	lsls	r4, r3, #4
 8003e5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003e64:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003e68:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003e6c:	4642      	mov	r2, r8
 8003e6e:	464b      	mov	r3, r9
 8003e70:	1891      	adds	r1, r2, r2
 8003e72:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003e74:	415b      	adcs	r3, r3
 8003e76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e78:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003e7c:	4641      	mov	r1, r8
 8003e7e:	eb12 0a01 	adds.w	sl, r2, r1
 8003e82:	4649      	mov	r1, r9
 8003e84:	eb43 0b01 	adc.w	fp, r3, r1
 8003e88:	f04f 0200 	mov.w	r2, #0
 8003e8c:	f04f 0300 	mov.w	r3, #0
 8003e90:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e94:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e9c:	4692      	mov	sl, r2
 8003e9e:	469b      	mov	fp, r3
 8003ea0:	4643      	mov	r3, r8
 8003ea2:	eb1a 0303 	adds.w	r3, sl, r3
 8003ea6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003eaa:	464b      	mov	r3, r9
 8003eac:	eb4b 0303 	adc.w	r3, fp, r3
 8003eb0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003ec0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003ec4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003ec8:	460b      	mov	r3, r1
 8003eca:	18db      	adds	r3, r3, r3
 8003ecc:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ece:	4613      	mov	r3, r2
 8003ed0:	eb42 0303 	adc.w	r3, r2, r3
 8003ed4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ed6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003eda:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003ede:	f7fc fcc9 	bl	8000874 <__aeabi_uldivmod>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	4611      	mov	r1, r2
 8003ee8:	4b3b      	ldr	r3, [pc, #236]	@ (8003fd8 <UART_SetConfig+0x2d4>)
 8003eea:	fba3 2301 	umull	r2, r3, r3, r1
 8003eee:	095b      	lsrs	r3, r3, #5
 8003ef0:	2264      	movs	r2, #100	@ 0x64
 8003ef2:	fb02 f303 	mul.w	r3, r2, r3
 8003ef6:	1acb      	subs	r3, r1, r3
 8003ef8:	00db      	lsls	r3, r3, #3
 8003efa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003efe:	4b36      	ldr	r3, [pc, #216]	@ (8003fd8 <UART_SetConfig+0x2d4>)
 8003f00:	fba3 2302 	umull	r2, r3, r3, r2
 8003f04:	095b      	lsrs	r3, r3, #5
 8003f06:	005b      	lsls	r3, r3, #1
 8003f08:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003f0c:	441c      	add	r4, r3
 8003f0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f12:	2200      	movs	r2, #0
 8003f14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f18:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003f1c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003f20:	4642      	mov	r2, r8
 8003f22:	464b      	mov	r3, r9
 8003f24:	1891      	adds	r1, r2, r2
 8003f26:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003f28:	415b      	adcs	r3, r3
 8003f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003f30:	4641      	mov	r1, r8
 8003f32:	1851      	adds	r1, r2, r1
 8003f34:	6339      	str	r1, [r7, #48]	@ 0x30
 8003f36:	4649      	mov	r1, r9
 8003f38:	414b      	adcs	r3, r1
 8003f3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f3c:	f04f 0200 	mov.w	r2, #0
 8003f40:	f04f 0300 	mov.w	r3, #0
 8003f44:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003f48:	4659      	mov	r1, fp
 8003f4a:	00cb      	lsls	r3, r1, #3
 8003f4c:	4651      	mov	r1, sl
 8003f4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f52:	4651      	mov	r1, sl
 8003f54:	00ca      	lsls	r2, r1, #3
 8003f56:	4610      	mov	r0, r2
 8003f58:	4619      	mov	r1, r3
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	4642      	mov	r2, r8
 8003f5e:	189b      	adds	r3, r3, r2
 8003f60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f64:	464b      	mov	r3, r9
 8003f66:	460a      	mov	r2, r1
 8003f68:	eb42 0303 	adc.w	r3, r2, r3
 8003f6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003f7c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003f80:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003f84:	460b      	mov	r3, r1
 8003f86:	18db      	adds	r3, r3, r3
 8003f88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	eb42 0303 	adc.w	r3, r2, r3
 8003f90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003f96:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003f9a:	f7fc fc6b 	bl	8000874 <__aeabi_uldivmod>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	4b0d      	ldr	r3, [pc, #52]	@ (8003fd8 <UART_SetConfig+0x2d4>)
 8003fa4:	fba3 1302 	umull	r1, r3, r3, r2
 8003fa8:	095b      	lsrs	r3, r3, #5
 8003faa:	2164      	movs	r1, #100	@ 0x64
 8003fac:	fb01 f303 	mul.w	r3, r1, r3
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	00db      	lsls	r3, r3, #3
 8003fb4:	3332      	adds	r3, #50	@ 0x32
 8003fb6:	4a08      	ldr	r2, [pc, #32]	@ (8003fd8 <UART_SetConfig+0x2d4>)
 8003fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fbc:	095b      	lsrs	r3, r3, #5
 8003fbe:	f003 0207 	and.w	r2, r3, #7
 8003fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4422      	add	r2, r4
 8003fca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003fcc:	e106      	b.n	80041dc <UART_SetConfig+0x4d8>
 8003fce:	bf00      	nop
 8003fd0:	40011000 	.word	0x40011000
 8003fd4:	40011400 	.word	0x40011400
 8003fd8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003fdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003fe6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003fea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003fee:	4642      	mov	r2, r8
 8003ff0:	464b      	mov	r3, r9
 8003ff2:	1891      	adds	r1, r2, r2
 8003ff4:	6239      	str	r1, [r7, #32]
 8003ff6:	415b      	adcs	r3, r3
 8003ff8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ffa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ffe:	4641      	mov	r1, r8
 8004000:	1854      	adds	r4, r2, r1
 8004002:	4649      	mov	r1, r9
 8004004:	eb43 0501 	adc.w	r5, r3, r1
 8004008:	f04f 0200 	mov.w	r2, #0
 800400c:	f04f 0300 	mov.w	r3, #0
 8004010:	00eb      	lsls	r3, r5, #3
 8004012:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004016:	00e2      	lsls	r2, r4, #3
 8004018:	4614      	mov	r4, r2
 800401a:	461d      	mov	r5, r3
 800401c:	4643      	mov	r3, r8
 800401e:	18e3      	adds	r3, r4, r3
 8004020:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004024:	464b      	mov	r3, r9
 8004026:	eb45 0303 	adc.w	r3, r5, r3
 800402a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800402e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800403a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800403e:	f04f 0200 	mov.w	r2, #0
 8004042:	f04f 0300 	mov.w	r3, #0
 8004046:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800404a:	4629      	mov	r1, r5
 800404c:	008b      	lsls	r3, r1, #2
 800404e:	4621      	mov	r1, r4
 8004050:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004054:	4621      	mov	r1, r4
 8004056:	008a      	lsls	r2, r1, #2
 8004058:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800405c:	f7fc fc0a 	bl	8000874 <__aeabi_uldivmod>
 8004060:	4602      	mov	r2, r0
 8004062:	460b      	mov	r3, r1
 8004064:	4b60      	ldr	r3, [pc, #384]	@ (80041e8 <UART_SetConfig+0x4e4>)
 8004066:	fba3 2302 	umull	r2, r3, r3, r2
 800406a:	095b      	lsrs	r3, r3, #5
 800406c:	011c      	lsls	r4, r3, #4
 800406e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004072:	2200      	movs	r2, #0
 8004074:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004078:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800407c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004080:	4642      	mov	r2, r8
 8004082:	464b      	mov	r3, r9
 8004084:	1891      	adds	r1, r2, r2
 8004086:	61b9      	str	r1, [r7, #24]
 8004088:	415b      	adcs	r3, r3
 800408a:	61fb      	str	r3, [r7, #28]
 800408c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004090:	4641      	mov	r1, r8
 8004092:	1851      	adds	r1, r2, r1
 8004094:	6139      	str	r1, [r7, #16]
 8004096:	4649      	mov	r1, r9
 8004098:	414b      	adcs	r3, r1
 800409a:	617b      	str	r3, [r7, #20]
 800409c:	f04f 0200 	mov.w	r2, #0
 80040a0:	f04f 0300 	mov.w	r3, #0
 80040a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040a8:	4659      	mov	r1, fp
 80040aa:	00cb      	lsls	r3, r1, #3
 80040ac:	4651      	mov	r1, sl
 80040ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040b2:	4651      	mov	r1, sl
 80040b4:	00ca      	lsls	r2, r1, #3
 80040b6:	4610      	mov	r0, r2
 80040b8:	4619      	mov	r1, r3
 80040ba:	4603      	mov	r3, r0
 80040bc:	4642      	mov	r2, r8
 80040be:	189b      	adds	r3, r3, r2
 80040c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80040c4:	464b      	mov	r3, r9
 80040c6:	460a      	mov	r2, r1
 80040c8:	eb42 0303 	adc.w	r3, r2, r3
 80040cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80040d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80040da:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80040dc:	f04f 0200 	mov.w	r2, #0
 80040e0:	f04f 0300 	mov.w	r3, #0
 80040e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80040e8:	4649      	mov	r1, r9
 80040ea:	008b      	lsls	r3, r1, #2
 80040ec:	4641      	mov	r1, r8
 80040ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040f2:	4641      	mov	r1, r8
 80040f4:	008a      	lsls	r2, r1, #2
 80040f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80040fa:	f7fc fbbb 	bl	8000874 <__aeabi_uldivmod>
 80040fe:	4602      	mov	r2, r0
 8004100:	460b      	mov	r3, r1
 8004102:	4611      	mov	r1, r2
 8004104:	4b38      	ldr	r3, [pc, #224]	@ (80041e8 <UART_SetConfig+0x4e4>)
 8004106:	fba3 2301 	umull	r2, r3, r3, r1
 800410a:	095b      	lsrs	r3, r3, #5
 800410c:	2264      	movs	r2, #100	@ 0x64
 800410e:	fb02 f303 	mul.w	r3, r2, r3
 8004112:	1acb      	subs	r3, r1, r3
 8004114:	011b      	lsls	r3, r3, #4
 8004116:	3332      	adds	r3, #50	@ 0x32
 8004118:	4a33      	ldr	r2, [pc, #204]	@ (80041e8 <UART_SetConfig+0x4e4>)
 800411a:	fba2 2303 	umull	r2, r3, r2, r3
 800411e:	095b      	lsrs	r3, r3, #5
 8004120:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004124:	441c      	add	r4, r3
 8004126:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800412a:	2200      	movs	r2, #0
 800412c:	673b      	str	r3, [r7, #112]	@ 0x70
 800412e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004130:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004134:	4642      	mov	r2, r8
 8004136:	464b      	mov	r3, r9
 8004138:	1891      	adds	r1, r2, r2
 800413a:	60b9      	str	r1, [r7, #8]
 800413c:	415b      	adcs	r3, r3
 800413e:	60fb      	str	r3, [r7, #12]
 8004140:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004144:	4641      	mov	r1, r8
 8004146:	1851      	adds	r1, r2, r1
 8004148:	6039      	str	r1, [r7, #0]
 800414a:	4649      	mov	r1, r9
 800414c:	414b      	adcs	r3, r1
 800414e:	607b      	str	r3, [r7, #4]
 8004150:	f04f 0200 	mov.w	r2, #0
 8004154:	f04f 0300 	mov.w	r3, #0
 8004158:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800415c:	4659      	mov	r1, fp
 800415e:	00cb      	lsls	r3, r1, #3
 8004160:	4651      	mov	r1, sl
 8004162:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004166:	4651      	mov	r1, sl
 8004168:	00ca      	lsls	r2, r1, #3
 800416a:	4610      	mov	r0, r2
 800416c:	4619      	mov	r1, r3
 800416e:	4603      	mov	r3, r0
 8004170:	4642      	mov	r2, r8
 8004172:	189b      	adds	r3, r3, r2
 8004174:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004176:	464b      	mov	r3, r9
 8004178:	460a      	mov	r2, r1
 800417a:	eb42 0303 	adc.w	r3, r2, r3
 800417e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	663b      	str	r3, [r7, #96]	@ 0x60
 800418a:	667a      	str	r2, [r7, #100]	@ 0x64
 800418c:	f04f 0200 	mov.w	r2, #0
 8004190:	f04f 0300 	mov.w	r3, #0
 8004194:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004198:	4649      	mov	r1, r9
 800419a:	008b      	lsls	r3, r1, #2
 800419c:	4641      	mov	r1, r8
 800419e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041a2:	4641      	mov	r1, r8
 80041a4:	008a      	lsls	r2, r1, #2
 80041a6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80041aa:	f7fc fb63 	bl	8000874 <__aeabi_uldivmod>
 80041ae:	4602      	mov	r2, r0
 80041b0:	460b      	mov	r3, r1
 80041b2:	4b0d      	ldr	r3, [pc, #52]	@ (80041e8 <UART_SetConfig+0x4e4>)
 80041b4:	fba3 1302 	umull	r1, r3, r3, r2
 80041b8:	095b      	lsrs	r3, r3, #5
 80041ba:	2164      	movs	r1, #100	@ 0x64
 80041bc:	fb01 f303 	mul.w	r3, r1, r3
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	011b      	lsls	r3, r3, #4
 80041c4:	3332      	adds	r3, #50	@ 0x32
 80041c6:	4a08      	ldr	r2, [pc, #32]	@ (80041e8 <UART_SetConfig+0x4e4>)
 80041c8:	fba2 2303 	umull	r2, r3, r2, r3
 80041cc:	095b      	lsrs	r3, r3, #5
 80041ce:	f003 020f 	and.w	r2, r3, #15
 80041d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4422      	add	r2, r4
 80041da:	609a      	str	r2, [r3, #8]
}
 80041dc:	bf00      	nop
 80041de:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80041e2:	46bd      	mov	sp, r7
 80041e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041e8:	51eb851f 	.word	0x51eb851f

080041ec <memset>:
 80041ec:	4402      	add	r2, r0
 80041ee:	4603      	mov	r3, r0
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d100      	bne.n	80041f6 <memset+0xa>
 80041f4:	4770      	bx	lr
 80041f6:	f803 1b01 	strb.w	r1, [r3], #1
 80041fa:	e7f9      	b.n	80041f0 <memset+0x4>

080041fc <__libc_init_array>:
 80041fc:	b570      	push	{r4, r5, r6, lr}
 80041fe:	4d0d      	ldr	r5, [pc, #52]	@ (8004234 <__libc_init_array+0x38>)
 8004200:	4c0d      	ldr	r4, [pc, #52]	@ (8004238 <__libc_init_array+0x3c>)
 8004202:	1b64      	subs	r4, r4, r5
 8004204:	10a4      	asrs	r4, r4, #2
 8004206:	2600      	movs	r6, #0
 8004208:	42a6      	cmp	r6, r4
 800420a:	d109      	bne.n	8004220 <__libc_init_array+0x24>
 800420c:	4d0b      	ldr	r5, [pc, #44]	@ (800423c <__libc_init_array+0x40>)
 800420e:	4c0c      	ldr	r4, [pc, #48]	@ (8004240 <__libc_init_array+0x44>)
 8004210:	f000 f818 	bl	8004244 <_init>
 8004214:	1b64      	subs	r4, r4, r5
 8004216:	10a4      	asrs	r4, r4, #2
 8004218:	2600      	movs	r6, #0
 800421a:	42a6      	cmp	r6, r4
 800421c:	d105      	bne.n	800422a <__libc_init_array+0x2e>
 800421e:	bd70      	pop	{r4, r5, r6, pc}
 8004220:	f855 3b04 	ldr.w	r3, [r5], #4
 8004224:	4798      	blx	r3
 8004226:	3601      	adds	r6, #1
 8004228:	e7ee      	b.n	8004208 <__libc_init_array+0xc>
 800422a:	f855 3b04 	ldr.w	r3, [r5], #4
 800422e:	4798      	blx	r3
 8004230:	3601      	adds	r6, #1
 8004232:	e7f2      	b.n	800421a <__libc_init_array+0x1e>
 8004234:	08004284 	.word	0x08004284
 8004238:	08004284 	.word	0x08004284
 800423c:	08004284 	.word	0x08004284
 8004240:	08004288 	.word	0x08004288

08004244 <_init>:
 8004244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004246:	bf00      	nop
 8004248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800424a:	bc08      	pop	{r3}
 800424c:	469e      	mov	lr, r3
 800424e:	4770      	bx	lr

08004250 <_fini>:
 8004250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004252:	bf00      	nop
 8004254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004256:	bc08      	pop	{r3}
 8004258:	469e      	mov	lr, r3
 800425a:	4770      	bx	lr
